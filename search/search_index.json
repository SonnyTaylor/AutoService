{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AutoService Documentation","text":"<p>Welcome to the AutoService documentation! Your complete guide to using and developing AutoService\u2014a powerful Windows diagnostic toolkit built with Tauri (Rust) + vanilla JavaScript.</p> <ul> <li> <p> Portable Toolkit</p> <p>Run from USB drives. No installation. Bring your tools anywhere.</p> </li> <li> <p> Automated Workflows</p> <p>Queue maintenance tasks and run them with one click. Save time on repetitive diagnostics.</p> </li> <li> <p> Comprehensive Reports</p> <p>Generate technical and customer-friendly reports automatically after each run.</p> </li> <li> <p> Extensible Design</p> <p>Add custom programs and scripts without touching code. Tailored to your workflow.</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<p>Portable Design</p> <p>AutoService runs from USB drives alongside a <code>data/</code> folder. Keep the executable and data directory together for full functionality:</p> <pre><code>\ud83d\udcc2 USB Drive\n\u251c\u2500\u2500 AutoService.exe\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 programs/      # External tools\n    \u251c\u2500\u2500 settings/      # Configuration\n    \u251c\u2500\u2500 reports/       # Generated reports\n    \u2514\u2500\u2500 logs/          # Execution logs\n</code></pre> <p>System Requirements</p> <ul> <li>OS: Windows 10 or later</li> <li>Privileges: Administrator access for diagnostic tasks</li> <li>Space: 100 MB minimum for app + logs</li> </ul>"},{"location":"#automation-first","title":"Automation First","text":"<p>Orchestrate cleanup, diagnostics, and stress testing with tools like AdwCleaner, BleachBit, SFC, DISM, smartctl, HeavyLoad, and FurMark\u2014all queued in a single workflow.</p>"},{"location":"#run-queue-builder","title":"Run Queue Builder","text":"<p>Drag-and-drop interface to build ordered task sequences. Configure parameters. Execute with precision.</p>"},{"location":"#portable-extensible","title":"Portable &amp; Extensible","text":"<p>Designed for USB deployment. Add your own tools and scripts via simple folder drops\u2014no code changes required.</p>"},{"location":"#system-diagnostics","title":"System Diagnostics","text":"<p>Collect comprehensive hardware specs, OS info, GPU details, battery health, and storage metrics\u2014all in one view.</p>"},{"location":"#component-testing","title":"Component Testing","text":"<p>Validate cameras, microphones, speakers, displays, keyboard, mouse, and network\u2014ensuring hardware works as expected.</p>"},{"location":"#detailed-reports","title":"Detailed Reports","text":"<p>Two report types: Technical (full diagnostic data) and Customer (simplified summaries). Export as PDF, JSON, or HTML.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> For Users</p> <p>Using AutoService to maintain or diagnose systems?</p> <p> User Guide Overview  Getting Started  Service Tab  Programs Tab  System Info Tab  Settings Tab</p> </li> <li> <p> For Developers</p> <p>Contributing to AutoService development?</p> <p> Developer Overview  Development Setup  Adding a Service  Architecture  Frontend Development  Backend Development</p> </li> </ul>"},{"location":"#support-contributing","title":"Support &amp; Contributing","text":"<ul> <li> <p> Report Issues</p> <p>Found a bug? Have a feature request?</p> <p> GitHub Issues</p> </li> <li> <p> License</p> <p>GNU General Public License v3.0</p> <p> View License</p> </li> <li> <p> Get Help</p> <p>Need assistance? Check existing issues first.</p> <p> Ask Questions</p> </li> <li> <p> Contribute</p> <p>Want to contribute? Start here.</p> <p> Contributing Guide</p> </li> </ul> <p>Version 0.4.0 \u2022 Last Updated: October 2025</p> <p> View on GitHub</p>"},{"location":"developer-guide/adding-service/","title":"Adding a Service","text":"<p>Learn how to create a new diagnostic or maintenance service in AutoService.</p> <p>Service Architecture</p> <p>Adding a service requires changes in exactly two places that must share the same ID:</p> Python BackendFrontend <p>Location: <code>runner/services/</code> Responsibility: Implement task execution logic Example: <code>runner/services/my_service.py</code></p> <p>Location: <code>src/pages/service/handlers/</code> Responsibility: UI display and parameter building Example: <code>src/pages/service/handlers/my_service/index.js</code></p> <p>Both components are coordinated by a shared service ID (e.g., <code>bleachbit_clean</code>, <code>sfc_scan</code>).</p>"},{"location":"developer-guide/adding-service/#step-1-python-service-implementation","title":"Step 1: Python Service Implementation","text":""},{"location":"developer-guide/adding-service/#create-python-handler","title":"Create Python Handler","text":"<p>Create <code>runner/services/my_service.py</code>:</p> <pre><code>import subprocess\nimport json\nfrom typing import Dict, Any\nimport time  # (1)!\n\ndef run_my_service(task: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Execute my_service task.\"\"\"\n    start_time = time.time()\n    try:\n        params = task.get(\"params\", {})  # (2)!\n        result = execute_my_logic(params)  # (3)!\n\n        return {\n            \"task_type\": \"my_service\",  # (4)!\n            \"status\": \"success\",\n            \"summary\": {\n                \"human_readable\": {  # (5)!\n                    \"status\": \"Service completed\",\n                    \"items_processed\": result[\"count\"]\n                },\n                \"results\": result  # (6)!\n            },\n            \"duration_seconds\": time.time() - start_time\n        }\n    except Exception as e:\n        return {\n            \"task_type\": \"my_service\",\n            \"status\": \"error\",\n            \"summary\": {\n                \"human_readable\": {\"error\": str(e)},\n                \"results\": {}\n            },\n            \"duration_seconds\": time.time() - start_time\n        }\n\ndef execute_my_logic(params):\n    \"\"\"Your service logic here.\"\"\"\n    return {\"count\": 42}\n</code></pre> <ol> <li>Import <code>time</code> to measure execution duration</li> <li>Extract parameters passed from the frontend</li> <li>Execute your custom service logic</li> <li>Must match the frontend handler ID exactly</li> <li>Human-readable data for UI display</li> <li>Raw technical data for detailed reports</li> </ol>"},{"location":"developer-guide/adding-service/#register-in-service-runner","title":"Register in Service Runner","text":"<p>Edit <code>runner/service_runner.py</code> and add to <code>TASK_HANDLERS</code>:</p> <pre><code>from services.my_service import run_my_service\n\nTASK_HANDLERS = {\n    # ... existing handlers ...\n    \"my_service\": run_my_service,  # (1)!\n}\n</code></pre> <ol> <li>The key must match the <code>id</code> in the frontend handler definition</li> </ol>"},{"location":"developer-guide/adding-service/#step-2-frontend-handler","title":"Step 2: Frontend Handler","text":""},{"location":"developer-guide/adding-service/#setup","title":"Setup","text":"Create DirectoryCopy Template <pre><code>mkdir src/pages/service/handlers/my_service\n</code></pre> <pre><code>cp src/pages/service/handlers/_TEMPLATE/index.js src/pages/service/handlers/my_service/index.js\n</code></pre>"},{"location":"developer-guide/adding-service/#implement-handler","title":"Implement Handler","text":"<p>Edit <code>src/pages/service/handlers/my_service/index.js</code>:</p> <pre><code>import { html } from \"lit-html\";\nimport { kpiBox, buildMetric } from \"../common/ui.js\";\n\n/**\n * Service definition for my_service\n */\nexport const definition = {\n  id: \"my_service\",                     // (1)!\n  label: \"My Service\",                  // (2)!\n  group: \"Diagnostics\",                 // (3)!\n  toolKeys: [\"my-tool\"],                // (4)!\n\n  async build({ params, resolveToolPath }) {\n    const toolPath = await resolveToolPath(\"my-tool\");  // (5)!\n    if (!toolPath) {\n      throw new Error(\"my-tool not found\");\n    }\n\n    return {\n      type: \"my_service\",\n      executable_path: toolPath,\n      params: {\n        my_param: params?.my_param || \"default_value\",\n      },\n    };\n  },\n};\n\n/**\n * Render technical report view\n */\nexport function renderTech({ result, index }) {  // (6)!\n  const { summary, status } = result;\n\n  return html`\n    &lt;div class=\"card\"&gt;\n      &lt;div class=\"card-header\"&gt;\n        &lt;h3&gt;My Service #${index + 1}&lt;/h3&gt;\n      &lt;/div&gt;\n      &lt;div class=\"card-body\"&gt;\n        ${kpiBox(\"Status\", status)} \n        ${kpiBox(\"Items Processed\", summary.human_readable?.items_processed ?? \"N/A\")} \n        ${summary.results ? html`&lt;pre class=\"output\"&gt;${JSON.stringify(summary.results, null, 2)}&lt;/pre&gt;` : \"\"}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n}\n\n/**\n * Extract customer-friendly metrics (optional)\n */\nexport function extractCustomerMetrics({ summary, status }) {  // (7)!\n  if (status !== \"success\") return null;\n\n  return buildMetric({\n    icon: \"\u2713\",\n    label: \"Service Status\",\n    value: \"Complete\",\n    detail: `Processed ${summary.human_readable?.items_processed ?? 0} items`,\n    variant: \"success\",\n  });\n}\n\n/**\n * Print-specific CSS (optional)\n */\nexport const printCSS = `\n  .my-service {\n    page-break-inside: avoid;\n  }\n`;\n</code></pre> <ol> <li>Must match Python handler ID exactly</li> <li>Display name in the UI service catalog</li> <li>Category for grouping services in the UI</li> <li>List of required external tools (e.g., <code>[\"bleachbit\", \"furmark\"]</code>)</li> <li>Resolve tool paths dynamically for USB portability</li> <li>Required - renders detailed technical view</li> <li>Optional - extracts metrics for customer-friendly report</li> </ol>"},{"location":"developer-guide/adding-service/#register-handler","title":"Register Handler","text":"<p>Edit <code>src/pages/service/handlers/index.js</code>:</p> <pre><code>import * as myService from \"./my_service/index.js\";\n\nconst HANDLERS = {\n  // ... existing handlers ...\n  my_service: myService,  // (1)!\n};\n</code></pre> <ol> <li>Key must match the <code>id</code> from the handler definition</li> </ol>"},{"location":"developer-guide/adding-service/#step-3-configurable-parameters","title":"Step 3: Configurable Parameters","text":""},{"location":"developer-guide/adding-service/#add-parameters-to-definition","title":"Add Parameters to Definition","text":"<p>Update the frontend handler to support user-configurable parameters:</p> <pre><code>export const definition = {\n  id: \"my_service\",\n  label: \"My Service\",\n  group: \"Diagnostics\",\n\n  // Parameter UI configuration  \n  params: [  // (1)!\n    {\n      id: \"duration\",\n      label: \"Duration (minutes)\",\n      type: \"number\",\n      default: 5,\n      min: 1,\n      max: 60,\n    },\n    {\n      id: \"verbose\",\n      label: \"Verbose Output\",\n      type: \"checkbox\",\n      default: true,\n    },\n  ],\n\n  async build({ params, resolveToolPath }) {\n    // params.duration and params.verbose are now available  // (2)!\n    return {\n      type: \"my_service\",\n      duration_minutes: params?.duration || 5,\n      verbose: params?.verbose ?? true\n    };\n  },\n};\n</code></pre> <ol> <li>Array of parameter definitions that appear in the UI</li> <li>Parameters are passed to <code>build()</code> from user selections</li> </ol>"},{"location":"developer-guide/adding-service/#parameter-types-supported","title":"Parameter Types Supported","text":"Number InputCheckboxText InputSelect Dropdown <pre><code>{\n  id: \"threshold\",\n  label: \"Threshold Value\",\n  type: \"number\",\n  default: 50,\n  min: 0,\n  max: 100,\n  step: 5\n}\n</code></pre> <pre><code>{\n  id: \"enable_deep_scan\",\n  label: \"Enable Deep Scan\",\n  type: \"checkbox\",\n  default: false\n}\n</code></pre> <pre><code>{\n  id: \"custom_path\",\n  label: \"Custom Path\",\n  type: \"text\",\n  default: \"C:\\\\\",\n  placeholder: \"Enter directory path\"\n}\n</code></pre> <pre><code>{\n  id: \"priority\",\n  label: \"Priority Level\",\n  type: \"select\",\n  default: \"normal\",\n  options: [\n    { value: \"low\", label: \"Low\" },\n    { value: \"normal\", label: \"Normal\" },\n    { value: \"high\", label: \"High\" }\n  ]\n}\n</code></pre>"},{"location":"developer-guide/adding-service/#step-4-return-value-schema","title":"Step 4: Return Value Schema","text":"<p>Critical: Exact Schema Required</p> <p>All Python services must return this exact structure. Deviations will break the frontend and reporting system.</p> Successful ResponseError ResponseWarning Response <pre><code>{\n    \"task_type\": \"my_service\",                  # (1)!\n    \"status\": \"success\",                        # (2)!\n    \"summary\": {\n        \"human_readable\": {                     # (3)!\n            \"key\": \"User-friendly value\",\n            \"status\": \"Completed\"\n        },\n        \"results\": {                            # (4)!\n            \"technical_data\": 42,\n            \"raw_output\": \"...\"\n        }\n    },\n    \"duration_seconds\": 12.34                   # (5)!\n}\n</code></pre> <ol> <li>Must match service ID exactly</li> <li>Use: <code>\"success\"</code>, <code>\"error\"</code>, or <code>\"warning\"</code></li> <li>Data displayed in customer-friendly report</li> <li>Raw technical data for technician report</li> <li>Execution time in seconds</li> </ol> <pre><code>{\n    \"task_type\": \"my_service\",\n    \"status\": \"error\",\n    \"summary\": {\n        \"human_readable\": {\n            \"error\": \"User-friendly error message\"\n        },\n        \"results\": {\n            \"exception\": \"Full traceback or details\"\n        }\n    },\n    \"duration_seconds\": 2.5\n}\n</code></pre> <pre><code>{\n    \"task_type\": \"my_service\",\n    \"status\": \"warning\",\n    \"summary\": {\n        \"human_readable\": {\n            \"status\": \"Partial success\",\n            \"warning\": \"Some files could not be processed\"\n        },\n        \"results\": {\n            \"processed\": 95,\n            \"failed\": 5\n        }\n    },\n    \"duration_seconds\": 8.75\n}\n</code></pre>"},{"location":"developer-guide/adding-service/#step-5-testing","title":"Step 5: Testing","text":""},{"location":"developer-guide/adding-service/#test-python-handler","title":"Test Python Handler","text":"<p>Create <code>runner/fixtures/test_my_service.json</code>:</p> <pre><code>{\n  \"tasks\": [\n    {\n      \"type\": \"my_service\",\n      \"params\": {\n        \"my_param\": \"test_value\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Run test:</p> <pre><code>python runner/service_runner.py runner/fixtures/test_my_service.json\n</code></pre>"},{"location":"developer-guide/adding-service/#test-frontend-handler","title":"Test Frontend Handler","text":"<ol> <li>Run <code>pnpm tauri dev</code></li> <li>Navigate to Service tab</li> <li>Your service should appear in the catalog</li> <li>Queue and run it</li> <li>Verify output in results</li> </ol>"},{"location":"developer-guide/adding-service/#real-world-example-simple-disk-check","title":"Real-World Example: Simple Disk Check","text":""},{"location":"developer-guide/adding-service/#python-runnerservicesdisk_check_servicepy","title":"Python (<code>runner/services/disk_check_service.py</code>)","text":"<pre><code>import subprocess\nimport json\n\ndef run_disk_check(task):\n    try:\n        # Run chkdsk to get disk info\n        result = subprocess.run(\n            [\"chkdsk\", \"C:\"],\n            capture_output=True,\n            text=True,\n            timeout=300\n        )\n\n        return {\n            \"task_type\": \"disk_check\",\n            \"status\": \"success\" if result.returncode == 0 else \"warning\",\n            \"summary\": {\n                \"human_readable\": {\n                    \"drive\": \"C:\",\n                    \"status\": \"OK\" if result.returncode == 0 else \"Errors found\"\n                },\n                \"results\": {\n                    \"output\": result.stdout\n                }\n            },\n            \"duration_seconds\": 60\n        }\n    except Exception as e:\n        return {\n            \"task_type\": \"disk_check\",\n            \"status\": \"error\",\n            \"summary\": {\n                \"human_readable\": {\"error\": str(e)},\n                \"results\": {}\n            },\n            \"duration_seconds\": 0\n        }\n</code></pre>"},{"location":"developer-guide/adding-service/#frontend-handler-similar-to-example-above","title":"Frontend Handler (similar to example above)","text":"<p>Best Practices</p> <ol> <li>Error handling - Always return proper status and error messages</li> <li>Logging - Use stderr markers for progress updates</li> <li>Performance - Include realistic duration estimates</li> <li>Validation - Check parameters before execution</li> <li>Documentation - Comment your code clearly</li> <li>Testing - Test both Python and frontend components</li> <li>User feedback - Provide clear status and next steps</li> </ol> <p>Implementation Checklist</p> <ul> <li> Python service created in <code>runner/services/my_service.py</code></li> <li> Service registered in <code>runner/service_runner.py</code></li> <li> Frontend handler created in <code>src/pages/service/handlers/my_service/</code></li> <li> Handler registered in <code>src/pages/service/handlers/index.js</code></li> <li> Service tested with Python fixtures</li> <li> Service tested in AutoService UI</li> <li> Both technical and customer views display correctly</li> <li> Documentation added (README in handler folder)</li> </ul> <p>Next: Frontend Development</p>"},{"location":"developer-guide/architecture/","title":"Architecture","text":"<p>Deep dive into AutoService's three-layer architecture, data flow patterns, and design principles.</p>"},{"location":"developer-guide/architecture/#three-layer-architecture","title":"Three-Layer Architecture","text":"<p>AutoService uses a clean separation of concerns across three independent layers:</p> <p> Frontend Layer</p> <p>Responsibility: User interface and state management</p> <ul> <li>Hash-based SPA routing</li> <li>Task queue builder UI</li> <li>Real-time progress display</li> <li>Report rendering &amp; printing</li> </ul> <p> Backend Layer</p> <p>Responsibility: System operations and IPC</p> <ul> <li>File I/O operations</li> <li>System information collection</li> <li>Process spawning &amp; management</li> <li>Event emission to frontend</li> </ul> <p> Service Runner</p> <p>Responsibility: Task execution</p> <ul> <li>Sequential task processing</li> <li>Real-time log streaming</li> <li>External tool orchestration</li> <li>Report generation</li> </ul> <p>AutoService's architecture enables:</p>"},{"location":"developer-guide/architecture/#layer-1-frontend-vanilla-js-vite","title":"Layer 1: Frontend (Vanilla JS + Vite)","text":"<p>Responsibilities:</p> <ul> <li>User interface and interactions</li> <li>Task queue management (builder)</li> <li>Results display and reporting</li> <li>Local state management (sessionStorage/localStorage)</li> </ul> <p>Technologies:</p> <ul> <li>HTML, CSS, vanilla JavaScript</li> <li>Vite build tool</li> <li>lit-html for templating</li> <li>No framework dependencies</li> </ul> <p>Key Files:</p> <ul> <li><code>src/main.js</code> - Hash-based router</li> <li><code>src/pages/*/</code> - Page modules</li> <li><code>src/utils/</code> - Shared utilities</li> </ul>"},{"location":"developer-guide/architecture/#layer-2-backend-rust-tauri","title":"Layer 2: Backend (Rust + Tauri)","text":"<p>Responsibilities:</p> <ul> <li>File I/O and data persistence</li> <li>System information collection</li> <li>External process management</li> <li>IPC command dispatch</li> </ul> <p>Technologies:</p> <ul> <li>Rust programming language</li> <li>Tauri desktop framework</li> <li>sysinfo crate for hardware info</li> <li>tokio async runtime</li> </ul> <p>Key Files:</p> <ul> <li><code>src-tauri/src/lib.rs</code> - Command registration</li> <li><code>src-tauri/src/*.rs</code> - Command implementations</li> <li><code>src-tauri/tauri.conf.json</code> - Configuration</li> </ul>"},{"location":"developer-guide/architecture/#layer-3-python-runner-async-service-executor","title":"Layer 3: Python Runner (Async Service Executor)","text":"<p>Responsibilities:</p> <ul> <li>Execute maintenance and diagnostic tasks</li> <li>Subprocess management</li> <li>Real-time progress streaming</li> <li>Report generation</li> </ul> <p>Technologies:</p> <ul> <li>Python 3.9+</li> <li>PyInstaller packaging</li> <li>Subprocess and asyncio</li> </ul> <p>Key Files:</p> <ul> <li><code>runner/service_runner.py</code> - Main orchestrator</li> <li><code>runner/services/*.py</code> - Task implementations</li> <li><code>runner/requirements.txt</code> - Dependencies</li> </ul>"},{"location":"developer-guide/architecture/#data-flow-running-a-service","title":"Data Flow: Running a Service","text":""},{"location":"developer-guide/architecture/#complete-service-execution-flow","title":"Complete Service Execution Flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    actor User\n    participant FE as \ud83d\udda5\ufe0f Frontend&lt;br/&gt;(JS)\n    participant BE as \u2699\ufe0f Backend&lt;br/&gt;(Rust)\n    participant PR as \ud83d\udc0d Python&lt;br/&gt;Runner\n\n    User-&gt;&gt;FE: 1\ufe0f\u20e3 Build task queue\n    Note right of FE: User selects:&lt;br/&gt;\u2022 SFC Scan&lt;br/&gt;\u2022 Disk Cleanup&lt;br/&gt;\u2022 BleachBit Clean\n\n    FE-&gt;&gt;FE: 2\ufe0f\u20e3 Generate JSON plan\n    FE-&gt;&gt;BE: 3\ufe0f\u20e3 invoke(\"start_service_run\")\n\n    BE-&gt;&gt;PR: 4\ufe0f\u20e3 Spawn subprocess\n    Note right of BE: Pass JSON via stdin\n\n    rect rgb(230, 245, 255)\n        Note over PR: \ud83d\udd04 Task Execution Loop\n\n        PR-&gt;&gt;PR: 5\ufe0f\u20e3 Parse &amp; validate plan\n\n        Note over PR: TASK_START: sfc_scan\n        PR-&gt;&gt;PR: Execute SFC\n        PR-&gt;&gt;BE: stderr: TASK_OK \u2713\n        BE-&gt;&gt;FE: Emit progress event\n        FE-&gt;&gt;FE: Update UI (33%)\n\n        Note over PR: TASK_START: disk_cleanup\n        PR-&gt;&gt;PR: Execute cleanup\n        PR-&gt;&gt;BE: stderr: TASK_OK \u2713\n        BE-&gt;&gt;FE: Emit progress event\n        FE-&gt;&gt;FE: Update UI (66%)\n\n        Note over PR: TASK_START: bleachbit_clean\n        PR-&gt;&gt;PR: Execute clean\n        PR-&gt;&gt;BE: stderr: TASK_OK \u2713\n        BE-&gt;&gt;FE: Emit progress event\n        FE-&gt;&gt;FE: Update UI (100%)\n    end\n\n    PR-&gt;&gt;BE: stdout: \ud83d\udcc4 FINAL JSON report\n    BE-&gt;&gt;FE: Emit completion event\n    FE-&gt;&gt;FE: Parse &amp; store report\n    FE-&gt;&gt;User: \ud83d\udcca Display results</code></pre> <p>Key Benefits of This Flow</p> <ul> <li>Asynchronous: UI remains responsive during execution</li> <li>Real-time feedback: Users see progress immediately</li> <li>Fault-tolerant: Errors in one task don't block others</li> <li>Detailed logging: Full execution trace for debugging</li> </ul>"},{"location":"developer-guide/architecture/#architecture-layers","title":"Architecture Layers","text":"<pre><code>graph TB\n    subgraph Frontend[\"\ud83d\udda5\ufe0f Frontend Layer\"]\n        Router[\"Hash Router&lt;br/&gt;main.js\"]\n        Pages[\"Page Modules&lt;br/&gt;src/pages/*\"]\n        State[\"State Management&lt;br/&gt;sessionStorage\"]\n        IPC[\"IPC Bridge&lt;br/&gt;window.__TAURI__\"]\n    end\n\n    subgraph Backend[\"\u2699\ufe0f Backend Layer\"]\n        Commands[\"Tauri Commands&lt;br/&gt;lib.rs\"]\n        FileIO[\"File I/O&lt;br/&gt;programs.rs\"]\n        System[\"System Info&lt;br/&gt;system.rs\"]\n        Process[\"Process Mgmt&lt;br/&gt;Tokio\"]\n    end\n\n    subgraph Runner[\"\ud83d\udc0d Python Runner Layer\"]\n        Dispatcher[\"Task Dispatcher&lt;br/&gt;service_runner.py\"]\n        Services[\"Service Modules&lt;br/&gt;services/*.py\"]\n        Output[\"Progress Streaming&lt;br/&gt;stderr/stdout\"]\n    end\n\n    Frontend --&gt;|IPC Invoke| Backend\n    Backend --&gt;|Spawn Subprocess| Runner\n    Backend --&gt;|Tauri Events| Frontend\n    Services --&gt;|Stream Logs| Output\n    Output --&gt;|Emit Events| Backend</code></pre>"},{"location":"developer-guide/architecture/#ipc-communication-patterns","title":"IPC Communication Patterns","text":"<p>AutoService uses Tauri's IPC (Inter-Process Communication) system for frontend-backend interaction.</p> Frontend \u2192 RustRust \u2192 FrontendFrontend Event Listener <p>Invoke Pattern: Frontend calls backend commands asynchronously.</p> src/pages/service/builder.js<pre><code>// Frontend calls Rust command with arguments\nconst result = await window.__TAURI__.core.invoke(\"command_name\", {\n  arg1: value1,\n  arg2: value2\n});\n\n// Example: Load app settings\nconst settings = await window.__TAURI__.core.invoke(\"load_app_settings\");\n</code></pre> <p>Common Commands</p> <ul> <li><code>load_app_settings</code> - Load application configuration</li> <li><code>save_program</code> - Persist program definition</li> <li><code>list_programs</code> - Get all registered programs</li> <li><code>get_system_info</code> - Retrieve hardware details</li> <li><code>start_service_run</code> - Execute service queue</li> </ul> <p>Event Pattern: Backend emits events that frontend listens to.</p> src-tauri/src/lib.rs<pre><code>// Rust emits event to frontend\napp.emit(\"event_name\", payload)?;\n\n// Example: Stream service runner output\napp.emit(\"service_runner_line\", LogLine {\n    timestamp: chrono::Utc::now(),\n    message: line,\n})?;\n</code></pre> <p>Listen Pattern: Subscribe to backend events in frontend.</p> src/pages/service/runner.js<pre><code>// Frontend listens for events\nconst unlisten = await window.__TAURI__.event.listen(\"event_name\", (event) =&gt; {\n  console.log(\"Received:\", event.payload);\n});\n\n// Example: Listen to service progress\nawait window.__TAURI__.event.listen(\"service_runner_line\", (event) =&gt; {\n  const { message } = event.payload;\n  if (message.includes(\"TASK_OK\")) {\n    updateProgress(message);\n  }\n});\n\n// Cleanup when done\nunlisten();\n</code></pre>"},{"location":"developer-guide/architecture/#key-design-patterns","title":"Key Design Patterns","text":""},{"location":"developer-guide/architecture/#1-self-contained-service-handlers","title":"1. Self-Contained Service Handlers","text":"<p>All logic for a service lives in one place:</p> <pre><code>src/pages/service/handlers/my_service/\n\u251c\u2500\u2500 index.js              # definition, renderTech, extractCustomerMetrics, printCSS\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 fixtures/\n    \u2514\u2500\u2500 test_my_service.json\n</code></pre> <p>This keeps related code together and makes services easy to add/remove.</p>"},{"location":"developer-guide/architecture/#2-portable-data-directory","title":"2. Portable Data Directory","text":"<p>All settings, tools, and reports live in <code>data/</code>:</p> <pre><code>AutoService.exe\ndata/\n\u251c\u2500\u2500 programs/    # External tools\n\u251c\u2500\u2500 settings/    # JSON configs (relative paths)\n\u251c\u2500\u2500 reports/     # Generated reports\n\u2514\u2500\u2500 logs/        # Execution logs\n</code></pre> <p>Benefits:</p> <ul> <li>USB portability (no absolute paths)</li> <li>Offline operation</li> <li>User customization without code changes</li> <li>Easy data backup</li> </ul>"},{"location":"developer-guide/architecture/#3-real-time-progress-streaming","title":"3. Real-Time Progress Streaming","text":"<p>Python runner emits markers to stderr:</p> <pre><code>sys.stderr.write(\"TASK_START: sfc_scan\\n\")\nsys.stderr.flush()  # Critical!\n\n# ... do work ...\n\nsys.stderr.write(\"TASK_OK: sfc_scan\\n\")\nsys.stderr.flush()\n</code></pre> <p>Frontend listens and updates UI in real-time.</p>"},{"location":"developer-guide/architecture/#4-standard-service-response-schema","title":"4. Standard Service Response Schema","text":"<p>All services return consistent structure:</p> <pre><code>{\n    \"task_type\": \"service_id\",\n    \"status\": \"success\" | \"error\" | \"warning\",\n    \"summary\": {\n        \"human_readable\": {...},    # User-friendly data\n        \"results\": {...}             # Raw technical data\n    },\n    \"duration_seconds\": 123.45\n}\n</code></pre>"},{"location":"developer-guide/architecture/#5-hash-based-router","title":"5. Hash-Based Router","text":"<p>Frontend uses hash routing for SPA:</p> <pre><code>#/service           \u2192 Service presets\n#/service-run       \u2192 Service builder\n#/service-results   \u2192 Results viewer\n#/programs          \u2192 Program management\n#/settings          \u2192 Configuration\n</code></pre> <p>No server required, works from file.</p>"},{"location":"developer-guide/architecture/#state-management","title":"State Management","text":""},{"location":"developer-guide/architecture/#frontend-state","title":"Frontend State","text":"<p>SessionStorage (transient, cleared on tab close):</p> <ul> <li><code>service.pendingRun</code> - Queued tasks</li> <li><code>service.finalReport</code> - Completed results</li> <li><code>tool.statuses.v1</code> - Cached tool availability</li> </ul> <p>LocalStorage (persistent):</p> <ul> <li><code>service.finalReport</code> - Report fallback</li> <li>Business settings</li> <li>App configuration</li> </ul>"},{"location":"developer-guide/architecture/#backend-state","title":"Backend State","text":"<p>AppState (in-memory):</p> <ul> <li><code>data_dir</code> - Path to data folder</li> <li>Connected app handle for event emission</li> </ul>"},{"location":"developer-guide/architecture/#async-patterns","title":"Async Patterns","text":""},{"location":"developer-guide/architecture/#frontend-tauri-python","title":"Frontend \u2192 Tauri \u2192 Python","text":"<pre><code>// Frontend (async/await)\nconst result = await invoke(\"start_service_run\", { plan });\n\n// Rust (tokio async)\n#[tauri::command]\nasync fn start_service_run(plan: RunPlan) -&gt; Result&lt;(), String&gt; {\n    // Spawn subprocess\n    // Listen to stdout/stderr\n}\n\n// Python (runs synchronously)\ndef main():\n    tasks = parse_plan(json_input)\n    run_tasks(tasks)\n    print_final_report()\n</code></pre>"},{"location":"developer-guide/architecture/#error-handling-strategy","title":"Error Handling Strategy","text":"<ol> <li>Python errors \u2192 Return error status in response</li> <li>Rust errors \u2192 Convert to IPC error message</li> <li>Frontend errors \u2192 Display user-friendly message</li> <li>User messages \u2192 Via notification system</li> </ol>"},{"location":"developer-guide/architecture/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Lazy loading - Pages load only when routed</li> <li>Vite code splitting - Automatic chunk optimization</li> <li>No re-renders - Vanilla JS, no framework overhead</li> <li>Async subprocess - Python runner runs in background</li> <li>Streaming output - No waiting for full results</li> </ol>"},{"location":"developer-guide/architecture/#security-considerations","title":"Security Considerations","text":"<ol> <li>Admin privileges - UAC prompt ensures user consent</li> <li>Sandboxed scripts - Python runner subprocess isolation</li> <li>No network by default - Only for explicit tests</li> <li>Data folder controls - User owns all tool/setting files</li> </ol> <p>Next: Adding a Service</p>"},{"location":"developer-guide/backend-dev/","title":"Backend Development","text":"<p>Develop the Rust backend and Tauri commands.</p>"},{"location":"developer-guide/backend-dev/#tauri-command-structure","title":"Tauri Command Structure","text":"<p>Commands are the bridge between frontend and backend.</p>"},{"location":"developer-guide/backend-dev/#basic-command","title":"Basic Command","text":"<pre><code>#[tauri::command]\nfn my_command(state: tauri::State&lt;AppState&gt;) -&gt; Result&lt;String, String&gt; {\n    Ok(\"Success!\".to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#with-parameters","title":"With Parameters","text":"<pre><code>#[tauri::command]\nfn my_command(\n    name: String,\n    count: i32,\n    state: tauri::State&lt;AppState&gt;,\n) -&gt; Result&lt;MyResult, String&gt; {\n    // Your logic\n    Ok(MyResult { /* ... */ })\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#async-command","title":"Async Command","text":"<pre><code>#[tauri::command]\nasync fn my_async_command(\n    state: tauri::State&lt;'_, AppState&gt;,\n) -&gt; Result&lt;String, String&gt; {\n    // Async work\n    tokio::time::sleep(Duration::from_secs(1)).await;\n    Ok(\"Done!\".to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#registering-commands","title":"Registering Commands","text":"<p>In <code>src-tauri/src/lib.rs</code>:</p> <pre><code>.invoke_handler(tauri::generate_handler![\n    my_command,\n    my_async_command,\n    other_command,\n    // ... more commands\n])\n</code></pre>"},{"location":"developer-guide/backend-dev/#app-state","title":"App State","text":"<p>Access shared state:</p> <pre><code>#[tauri::command]\nfn get_data_dir(state: tauri::State&lt;AppState&gt;) -&gt; Result&lt;String, String&gt; {\n    let data_dir = &amp;state.data_dir;\n    Ok(data_dir.to_string_lossy().to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#file-operations","title":"File Operations","text":""},{"location":"developer-guide/backend-dev/#read-file","title":"Read File","text":"<pre><code>use std::fs;\n\n#[tauri::command]\nfn read_file(path: String) -&gt; Result&lt;String, String&gt; {\n    fs::read_to_string(&amp;path)\n        .map_err(|e| e.to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#write-file","title":"Write File","text":"<pre><code>use std::fs;\n\n#[tauri::command]\nfn write_file(path: String, content: String) -&gt; Result&lt;(), String&gt; {\n    fs::write(&amp;path, content)\n        .map_err(|e| e.to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#list-directory","title":"List Directory","text":"<pre><code>use std::fs;\n\n#[tauri::command]\nfn list_dir(path: String) -&gt; Result&lt;Vec&lt;String&gt;, String&gt; {\n    let mut entries = Vec::new();\n    for entry in fs::read_dir(&amp;path).map_err(|e| e.to_string())? {\n        let entry = entry.map_err(|e| e.to_string())?;\n        let name = entry.file_name();\n        entries.push(name.to_string_lossy().to_string());\n    }\n    Ok(entries)\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#emitting-events","title":"Emitting Events","text":"<p>Send data to frontend:</p> <pre><code>#[tauri::command]\nfn trigger_event(app: tauri::AppHandle) -&gt; Result&lt;(), String&gt; {\n    app.emit_all(\"my_event\", \"payload data\")\n        .map_err(|e| e.to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#spawning-processes","title":"Spawning Processes","text":"<p>Run external programs:</p> <pre><code>use std::process::Command;\n\n#[tauri::command]\nfn run_program(exe_path: String, args: Vec&lt;String&gt;) -&gt; Result&lt;String, String&gt; {\n    let output = Command::new(&amp;exe_path)\n        .args(&amp;args)\n        .output()\n        .map_err(|e| e.to_string())?;\n\n    String::from_utf8(output.stdout)\n        .map_err(|e| e.to_string())\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#system-information","title":"System Information","text":"<p>Use <code>sysinfo</code> crate:</p> <pre><code>use sysinfo::System;\n\n#[tauri::command]\nfn get_system_info() -&gt; Result&lt;SystemInfo, String&gt; {\n    let sys = System::new_all();\n\n    Ok(SystemInfo {\n        cpu_count: sys.cpus().len(),\n        memory_total: sys.total_memory(),\n        memory_available: sys.available_memory(),\n    })\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#error-handling","title":"Error Handling","text":"<p>Convert errors to strings for frontend:</p> <pre><code>#[tauri::command]\nfn risky_operation() -&gt; Result&lt;String, String&gt; {\n    // Use ? operator to propagate errors\n    let data = std::fs::read_to_string(\"file.txt\")?;\n\n    // Manual error handling\n    if data.is_empty() {\n        return Err(\"File is empty\".to_string());\n    }\n\n    Ok(data)\n}\n</code></pre>"},{"location":"developer-guide/backend-dev/#development-tips","title":"Development Tips","text":""},{"location":"developer-guide/backend-dev/#compilation","title":"Compilation","text":"<pre><code># Check compilation without building\ncargo check\n\n# Build for development\ncargo build\n\n# Build for release\ncargo build --release\n\n# Build and watch for changes\ncargo watch -x build\n</code></pre>"},{"location":"developer-guide/backend-dev/#testing","title":"Testing","text":"<pre><code># Run tests\ncargo test\n\n# Run specific test\ncargo test my_test\n\n# Run with output\ncargo test -- --nocapture\n</code></pre>"},{"location":"developer-guide/backend-dev/#debugging","title":"Debugging","text":"<p>Add <code>dbg!()</code> macro for quick debugging:</p> <pre><code>let value = dbg!(some_calculation());\n// Output: [filename:line] value = result\n</code></pre> <p>Next: Python Runner</p>"},{"location":"developer-guide/contributing/","title":"Contributing to AutoService","text":"<p>We welcome contributions! This guide will help you get started.</p>"},{"location":"developer-guide/contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>Report Bugs - Found an issue? Open a GitHub issue</li> <li>Suggest Features - Have an idea? Create a feature request</li> <li>Write Documentation - Help others understand the project</li> <li>Fix Bugs - Submit PRs for reported issues</li> <li>Add Services - Create new diagnostic/maintenance services</li> <li>Improve UI - Enhance the user interface</li> <li>Optimize Performance - Make AutoService faster</li> <li>Test - Help test new features and report issues</li> </ul>"},{"location":"developer-guide/contributing/#getting-started","title":"Getting Started","text":""},{"location":"developer-guide/contributing/#1-set-up-development-environment","title":"1. Set Up Development Environment","text":"<p>Follow the Development Setup guide.</p>"},{"location":"developer-guide/contributing/#2-create-a-feature-branch","title":"2. Create a Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>Branch naming:</p> <ul> <li><code>feature/</code> - New features</li> <li><code>fix/</code> - Bug fixes</li> <li><code>docs/</code> - Documentation</li> <li><code>refactor/</code> - Code improvements</li> </ul>"},{"location":"developer-guide/contributing/#3-make-your-changes","title":"3. Make Your Changes","text":"<ul> <li>Keep commits focused and atomic</li> <li>Write descriptive commit messages</li> <li>Follow existing code style</li> <li>Add comments for complex logic</li> </ul>"},{"location":"developer-guide/contributing/#4-test-your-changes","title":"4. Test Your Changes","text":"<pre><code># Frontend\npnpm test\n\n# Backend\ncargo test\n\n# Python\npython -m pytest runner/\n\n# Full app\npnpm tauri dev\n</code></pre>"},{"location":"developer-guide/contributing/#5-submit-a-pull-request","title":"5. Submit a Pull Request","text":"<ol> <li>Push your branch to GitHub</li> <li>Create a Pull Request with a clear description</li> <li>Link any related issues</li> <li>Wait for review and address feedback</li> </ol>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":""},{"location":"developer-guide/contributing/#javascript","title":"JavaScript","text":"<ul> <li>Use camelCase for variables and functions</li> <li>Use UPPER_CASE for constants</li> <li>Use semicolons (automatic with most editors)</li> <li>Use <code>const</code> by default, <code>let</code> if reassignment needed</li> </ul> <p>Example:</p> <pre><code>const MAX_RETRIES = 3;\n\nfunction handleUserInput(value) {\n  const processed = value.trim();\n  return processed;\n}\n</code></pre>"},{"location":"developer-guide/contributing/#rust","title":"Rust","text":"<ul> <li>Follow Rust conventions (rustfmt automatically)</li> <li>Use snake_case for functions and variables</li> <li>Use PascalCase for types and structs</li> <li>Add documentation comments (///)</li> </ul> <p>Example:</p> <pre><code>/// Calculate the sum of two numbers\nfn calculate_sum(a: i32, b: i32) -&gt; i32 {\n    a + b\n}\n</code></pre>"},{"location":"developer-guide/contributing/#python","title":"Python","text":"<ul> <li>Follow PEP 8</li> <li>Use snake_case for functions and variables</li> <li>Add type hints where practical</li> <li>Document functions with docstrings</li> </ul> <p>Example:</p> <pre><code>def calculate_total(items: List[int]) -&gt; int:\n    \"\"\"\n    Calculate the total of a list of items.\n\n    Args:\n        items: List of integers to sum\n\n    Returns:\n        The sum of all items\n    \"\"\"\n    return sum(items)\n</code></pre>"},{"location":"developer-guide/contributing/#adding-a-new-service","title":"Adding a New Service","text":"<p>The easiest way to contribute! Follow Adding a Service.</p> <p>Quick checklist:</p> <ul> <li> Python service in <code>runner/services/</code></li> <li> Registered in <code>runner/service_runner.py</code></li> <li> Frontend handler in <code>src/pages/service/handlers/</code></li> <li> Handler registered in handler index</li> <li> Test fixtures created</li> <li> Documentation in handler README</li> </ul>"},{"location":"developer-guide/contributing/#commit-messages","title":"Commit Messages","text":"<p>Write clear, descriptive commit messages:</p> <pre><code># Good\nfeat: Add SSD health monitoring service\nfix: Correct tool path resolution on network drives\ndocs: Update service development guide\n\n# Avoid\nupdate\nfix stuff\nchanges\n</code></pre> <p>Format:</p> <pre><code>&lt;type&gt;: &lt;subject&gt;\n\n&lt;body (optional, for detailed changes)&gt;\n\nFixes #123\n</code></pre> <p>Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>refactor</code>, <code>perf</code>, <code>test</code>, <code>chore</code></p>"},{"location":"developer-guide/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":""},{"location":"developer-guide/contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li> All tests pass (<code>pnpm test</code>, <code>cargo test</code>)</li> <li> Code follows style guidelines</li> <li> No console errors or warnings</li> <li> Changes are documented (code comments, README, docs)</li> <li> Commit messages are clear and descriptive</li> </ul>"},{"location":"developer-guide/contributing/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] New feature\n- [ ] Bug fix\n- [ ] Documentation update\n- [ ] Other: ...\n\n## Testing\nHow to test the changes\n\n## Related Issues\nFixes #123\n\n## Checklist\n- [ ] Tests pass\n- [ ] Code style follows guidelines\n- [ ] Documentation updated\n- [ ] No new warnings\n</code></pre>"},{"location":"developer-guide/contributing/#issue-reporting","title":"Issue Reporting","text":""},{"location":"developer-guide/contributing/#report-a-bug","title":"Report a Bug","text":"<p>Include:</p> <ul> <li>AutoService version</li> <li>Windows version</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Screenshots (if applicable)</li> <li>Logs from <code>data/logs/</code></li> </ul>"},{"location":"developer-guide/contributing/#request-a-feature","title":"Request a Feature","text":"<p>Include:</p> <ul> <li>Clear description of desired functionality</li> <li>Use cases and benefits</li> <li>Any potential challenges</li> <li>Related features (if any)</li> </ul>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":"<p>Help improve documentation by:</p> <ul> <li>Fixing typos or unclear explanations</li> <li>Adding examples</li> <li>Clarifying complex concepts</li> <li>Keeping docs up-to-date with code changes</li> </ul> <p>Documentation files:</p> <ul> <li>User guide: <code>docs/user-guide/</code></li> <li>Developer guide: <code>docs/developer-guide/</code></li> <li>Code comments: In source files</li> <li>README: <code>README.md</code></li> </ul>"},{"location":"developer-guide/contributing/#project-guidelines","title":"Project Guidelines","text":""},{"location":"developer-guide/contributing/#dos","title":"Do's","text":"<ul> <li> Write tests for new features</li> <li> Keep functions focused and small</li> <li> Comment non-obvious code</li> <li> Test on actual Windows systems</li> <li> Follow existing patterns</li> <li> Ask questions if unsure</li> </ul>"},{"location":"developer-guide/contributing/#donts","title":"Don'ts","text":"<ul> <li>\u274c Hard-code paths (use <code>resolveToolPath()</code>)</li> <li>\u274c Skip error handling</li> <li>\u274c Make unrelated changes in one PR</li> <li>\u274c Commit without testing</li> <li>\u274c Add breaking changes without discussion</li> <li>\u274c Ignore code review feedback</li> </ul>"},{"location":"developer-guide/contributing/#review-process","title":"Review Process","text":"<ol> <li>Your PR is reviewed by maintainers</li> <li>Address any feedback or questions</li> <li>Update code as needed</li> <li>Rebase if necessary</li> <li>PR is merged when approved</li> </ol>"},{"location":"developer-guide/contributing/#license","title":"License","text":"<p>By contributing, you agree your code will be licensed under GNU GPL v3.0 (same as the project).</p>"},{"location":"developer-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Assume good intent</li> <li>Provide constructive feedback</li> <li>Report inappropriate behavior to maintainers</li> </ul>"},{"location":"developer-guide/contributing/#need-help","title":"Need Help?","text":"<ul> <li>Check existing GitHub Issues</li> <li>Ask questions in PR discussions</li> <li>Read the Architecture documentation</li> <li>Review existing code for patterns</li> </ul>"},{"location":"developer-guide/contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue or discussion on GitHub!</p> <p>Thank you for contributing to AutoService! \ud83c\udf89</p>"},{"location":"developer-guide/dev-setup/","title":"Development Setup","text":"<p>Get your development environment ready for AutoService.</p> <p>Prerequisites</p>"},{"location":"developer-guide/dev-setup/#required-software","title":"Required Software","text":"<ul> <li>Windows 10 or later - Primary development target</li> <li>Node.js 18+ - Download from nodejs.org</li> <li>pnpm - Package manager (install globally: <code>npm install -g pnpm</code>)</li> <li>Rust - Install from rustup.rs</li> <li>Python 3.9+ - Download from python.org</li> <li>Git - Download from git-scm.com</li> </ul>"},{"location":"developer-guide/dev-setup/#clone-and-install","title":"Clone and Install","text":""},{"location":"developer-guide/dev-setup/#step-1-clone-repository","title":"Step 1: Clone Repository","text":"<pre><code>git clone https://github.com/SonnyTaylor/AutoService.git\ncd AutoService\n</code></pre>"},{"location":"developer-guide/dev-setup/#step-2-install-node-dependencies","title":"Step 2: Install Node Dependencies","text":"<pre><code>pnpm install\n</code></pre> <p>This installs frontend dependencies from <code>package.json</code>.</p>"},{"location":"developer-guide/dev-setup/#step-3-install-python-dependencies","title":"Step 3: Install Python Dependencies","text":"<pre><code>pip install -r runner/requirements.txt\n</code></pre> <p>This sets up the Python environment for the service runner.</p>"},{"location":"developer-guide/dev-setup/#step-4-verify-rust-installation","title":"Step 4: Verify Rust Installation","text":"<pre><code>rustc --version\ncargo --version\n</code></pre> <p>Both commands should print version numbers.</p>"},{"location":"developer-guide/dev-setup/#running-in-development","title":"Running in Development","text":""},{"location":"developer-guide/dev-setup/#frontend-only-rarely-used","title":"Frontend Only (Rarely Used)","text":"<pre><code>pnpm dev\n</code></pre> <p>Starts Vite dev server on <code>http://localhost:5173</code>. Frontend only, no backend.</p>"},{"location":"developer-guide/dev-setup/#full-app-with-tauri-recommended","title":"Full App with Tauri (Recommended)","text":"<p>Administrator Terminal Required</p> <p>You must run this command in an administrator terminal. Tauri requires elevated privileges for system access and many AutoService features need admin rights.</p> <pre><code>pnpm tauri dev\n</code></pre> <p>This command:</p> <ul> <li>Starts Vite dev server</li> <li>Compiles Rust backend</li> <li>Launches AutoService with hot-reload</li> <li>Recompiles on frontend and Rust changes</li> </ul>"},{"location":"developer-guide/dev-setup/#building-for-production","title":"Building for Production","text":"<pre><code>pnpm tauri build\n</code></pre> <p>Creates optimized executable at <code>src-tauri/target/release/autoservice.exe</code>.</p> <p>The build process:</p> <ol> <li>Compiles frontend (Vite)</li> <li>Compiles Rust backend (Cargo)</li> <li>Compiles Python runner (PyInstaller) if source is newer</li> <li>Embeds all resources into executable</li> <li>Creates portable executable</li> </ol>"},{"location":"developer-guide/dev-setup/#project-structure-for-development","title":"Project Structure for Development","text":"<pre><code>AutoService/\n\u251c\u2500\u2500 src/                    # Frontend source\n\u2502   \u251c\u2500\u2500 main.js             # Router\n\u2502   \u251c\u2500\u2500 pages/              # Page modules\n\u2502   \u251c\u2500\u2500 styles/             # CSS files\n\u2502   \u2514\u2500\u2500 utils/              # Utility functions\n\u251c\u2500\u2500 src-tauri/              # Rust backend\n\u2502   \u251c\u2500\u2500 src/                # Rust source\n\u2502   \u251c\u2500\u2500 Cargo.toml          # Rust dependencies\n\u2502   \u2514\u2500\u2500 tauri.conf.json     # Tauri config\n\u251c\u2500\u2500 runner/                 # Python runner\n\u2502   \u251c\u2500\u2500 service_runner.py   # Main script\n\u2502   \u251c\u2500\u2500 services/           # Service implementations\n\u2502   \u2514\u2500\u2500 requirements.txt    # Python dependencies\n\u251c\u2500\u2500 data/                   # Data folder (portable)\n\u251c\u2500\u2500 package.json            # Node dependencies\n\u251c\u2500\u2500 pnpm-lock.yaml          # Dependency lock file\n\u2514\u2500\u2500 vite.config.js          # Vite configuration\n</code></pre>"},{"location":"developer-guide/dev-setup/#development-commands","title":"Development Commands","text":"FrontendFull App (Tauri)Backend (Rust)Python Runner Development Server<pre><code># Vite dev server (rarely used standalone)\npnpm dev\n</code></pre> Build Frontend<pre><code># Build for production\npnpm build\n</code></pre> Preview Build<pre><code># Preview production frontend\npnpm preview\n</code></pre> Run Tests<pre><code># Run Node.js native tests\npnpm test\n</code></pre> Development Mode<pre><code># Hot-reload frontend + Rust backend\n# MUST run in administrator terminal\npnpm tauri dev\n</code></pre> Production Build<pre><code># Create optimized executable\npnpm tauri build\n</code></pre> Check Compilation<pre><code># Verify Rust code compiles\ncargo check\n</code></pre> Run Tests<pre><code># Execute Rust tests\ncargo test\n</code></pre> Build Backend<pre><code># Build Rust backend only\ncargo build\n</code></pre> Test Service<pre><code># Test individual service with fixture\npython runner/service_runner.py runner/fixtures/test_bleachbit.json\n</code></pre> Verify Syntax<pre><code># Check Python syntax\npython -m py_compile runner/service_runner.py\n</code></pre> Install Dependencies<pre><code># Install Python packages\npip install -r runner/requirements.txt\n</code></pre> <p>No cargo watch Required</p> <p>The <code>cargo watch</code> tool is not required or configured for this project. Use <code>pnpm tauri dev</code> for hot-reload during development.</p>"},{"location":"developer-guide/dev-setup/#ide-setup","title":"IDE Setup","text":""},{"location":"developer-guide/dev-setup/#visual-studio-code","title":"Visual Studio Code","text":"<p>Recommended extensions:</p> <ul> <li>Rust Analyzer - Rust language support</li> <li>Tauri - Tauri framework support</li> <li>Python - Python language support</li> <li>Vite - Vite support</li> <li>ES7+ React/Redux/React-Native snippets - JS snippets</li> </ul>"},{"location":"developer-guide/dev-setup/#settings-for-consistent-development","title":"Settings for Consistent Development","text":"<p>Create <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"[python]\": {\n    \"editor.defaultFormatter\": \"ms-python.python\",\n    \"editor.formatOnSave\": true\n  },\n  \"[rust]\": {\n    \"editor.defaultFormatter\": \"rust-lang.rust-analyzer\",\n    \"editor.formatOnSave\": true\n  },\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  }\n}\n</code></pre>"},{"location":"developer-guide/dev-setup/#debugging","title":"Debugging","text":""},{"location":"developer-guide/dev-setup/#debug-frontend","title":"Debug Frontend","text":"<ol> <li>Open DevTools: <code>Ctrl+Shift+I</code> in dev mode</li> <li>Use Console for logs</li> <li>Set breakpoints in Sources tab</li> <li>Use debugger statements in code</li> </ol>"},{"location":"developer-guide/dev-setup/#debug-rust-backend","title":"Debug Rust Backend","text":"<pre><code># Set breakpoints and run with debugger\ncargo run --debug\n\n# Or use VS Code debugger with CodeLLDB extension\n</code></pre>"},{"location":"developer-guide/dev-setup/#debug-python-runner","title":"Debug Python Runner","text":"<pre><code># Run with Python debugger\npython -m pdb runner/service_runner.py runner/fixtures/test_bleachbit.json\n\n# Or add breakpoints in IDE\n</code></pre>"},{"location":"developer-guide/dev-setup/#common-issues","title":"Common Issues","text":"<p>Error: 'Tauri requires admin privileges'</p> <p>Solution: Run terminal as Administrator before <code>pnpm tauri dev</code></p> <p>Error: 'Rust toolchain not found'</p> <p>Solution: Install Rust from rustup.rs and restart terminal</p> <p>Error: 'Python not found'</p> <p>Solution: Ensure Python is installed and in PATH; restart terminal after installation</p> <p>Error: 'pnpm: command not found'</p> <p>Solution: Install pnpm globally: <code>npm install -g pnpm</code></p> <p>Hot-reload not working</p> <p>Solution: Ensure you're running <code>pnpm tauri dev</code> from admin terminal, not <code>pnpm dev</code></p>"},{"location":"developer-guide/dev-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview - Understand the design</li> <li>Adding a Service - Create new functionality</li> <li>Frontend Development - Work on UI</li> <li>Backend Development - Work on Rust code</li> </ul> <p>Need help? Check the README or open an issue on GitHub.</p>"},{"location":"developer-guide/frontend-dev/","title":"Frontend Development","text":"<p>Build the AutoService user interface using vanilla JavaScript and Vite.</p>"},{"location":"developer-guide/frontend-dev/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 index.html              # Main entry point\n\u251c\u2500\u2500 main.js                 # Hash router and page loader\n\u251c\u2500\u2500 pages/                  # Page modules\n\u2502   \u251c\u2500\u2500 service/            # Service automation UI\n\u2502   \u251c\u2500\u2500 programs/           # Program management\n\u2502   \u251c\u2500\u2500 scripts/            # Script catalog\n\u2502   \u251c\u2500\u2500 settings/           # Configuration UI\n\u2502   \u251c\u2500\u2500 system-info/        # System information display\n\u2502   \u2514\u2500\u2500 [page]/index.js     # Controller with initPage()\n\u251c\u2500\u2500 styles/                 # CSS files\n\u2502   \u251c\u2500\u2500 core.css            # Global styles\n\u2502   \u251c\u2500\u2500 service.css         # Service page styles\n\u2502   \u2514\u2500\u2500 [page].css          # Page-specific styles\n\u251c\u2500\u2500 utils/                  # Shared utilities\n\u2502   \u251c\u2500\u2500 business.js         # Business settings\n\u2502   \u251c\u2500\u2500 tools.js            # Tool management\n\u2502   \u251c\u2500\u2500 reports.js          # Report utilities\n\u2502   \u2514\u2500\u2500 [name].js           # Other utilities\n\u2514\u2500\u2500 assets/                 # Images, icons, etc.\n</code></pre>"},{"location":"developer-guide/frontend-dev/#router-and-page-loading","title":"Router and Page Loading","text":""},{"location":"developer-guide/frontend-dev/#how-the-router-works","title":"How the Router Works","text":"<p><code>src/main.js</code> implements a hash-based router:</p> <pre><code>// Routes to different pages\n#/service         \u2192 service/presets.html\n#/service-run     \u2192 service/builder.html\n#/programs        \u2192 programs/index.html\n#/settings        \u2192 settings/settings.html\n</code></pre>"},{"location":"developer-guide/frontend-dev/#creating-a-new-page","title":"Creating a New Page","text":"<ol> <li>Create page files:</li> </ol> <pre><code>src/pages/my_page/\n\u251c\u2500\u2500 my_page.html        # Page markup\n\u2514\u2500\u2500 index.js            # Controller\n</code></pre> <ol> <li>Implement controller (<code>src/pages/my_page/index.js</code>):</li> </ol> <pre><code>export async function initPage() {\n  // Initialize page\n  const element = document.getElementById(\"my-element\");\n  element.addEventListener(\"click\", handleClick);\n}\n\nfunction handleClick(event) {\n  // Handle event\n}\n</code></pre> <ol> <li> <p>Register in router - Usually automatic if following conventions</p> </li> <li> <p>Add styling (optional):</p> </li> </ol> <pre><code>src/styles/my_page.css\n</code></pre>"},{"location":"developer-guide/frontend-dev/#frontend-backend-communication","title":"Frontend-Backend Communication","text":""},{"location":"developer-guide/frontend-dev/#invoke-tauri-commands","title":"Invoke Tauri Commands","text":"<p>Call Rust backend from frontend using the Tauri IPC bridge:</p> Basic InvokeWith ParametersError Handling <pre><code>const result = await window.__TAURI__.core.invoke(\"command_name\");\n</code></pre> <pre><code>const result = await window.__TAURI__.core.invoke(\"command_name\", {\n  param1: \"value1\",\n  param2: 42\n});\n</code></pre> <pre><code>try {\n  const result = await window.__TAURI__.core.invoke(\"command_name\");\n} catch (error) {\n  console.error(\"Command failed:\", error);\n}\n</code></pre>"},{"location":"developer-guide/frontend-dev/#listen-to-events","title":"Listen to Events","text":"<p>Receive updates from Rust backend:</p> <pre><code>// Listen for event  // (1)!\nwindow.__TAURI__.event.listen(\"event_name\", (event) =&gt; {\n  console.log(\"Event payload:\", event.payload);\n});\n\n// Listen once  // (2)!\nwindow.__TAURI__.event.once(\"event_name\", (event) =&gt; {\n  console.log(\"One-time event\");\n});\n\n// Stop listening  // (3)!\nconst unlisten = await window.__TAURI__.event.listen(\"event_name\", listener);\nunlisten();\n</code></pre> <ol> <li>Continuous listener - fires every time event is emitted</li> <li>One-shot listener - fires only the first time</li> <li>Call the returned function to stop listening</li> </ol>"},{"location":"developer-guide/frontend-dev/#working-with-services","title":"Working with Services","text":""},{"location":"developer-guide/frontend-dev/#service-handler-structure","title":"Service Handler Structure","text":"<p>Each service is a self-contained module with four optional exports:</p> <pre><code>// src/pages/service/handlers/my_service/index.js\nimport { html } from 'lit-html';\nimport { kpiBox, buildMetric } from \"../common/ui.js\";\n\nexport const definition = {  // (1)!\n  id: \"my_service\",\n  label: \"My Service\",\n  group: \"Diagnostics\",\n  toolKeys: [],\n\n  async build({ params, resolveToolPath, getDataDirs }) {  // (2)!\n    return {\n      type: \"my_service\",\n      params: params\n    };\n  }\n};\n\nexport function renderTech({ result, index }) {  // (3)!\n  const { status, summary } = result;\n  return html`\n    &lt;div class=\"card\"&gt;\n      &lt;h3&gt;My Service Result&lt;/h3&gt;\n      ${kpiBox(\"Status\", status)}\n    &lt;/div&gt;\n  `;\n}\n\nexport function extractCustomerMetrics({ summary, status }) {  // (4)!\n  if (status !== \"success\") return null;\n  return buildMetric({\n    icon: \"\u2713\",\n    label: \"Status\",\n    value: \"OK\"\n  });\n}\n\nexport const printCSS = `/* Print styles */`;  // (5)!\n</code></pre> <ol> <li>Definition (required) - Service metadata, UI label, dependencies, task builder</li> <li>Build Function (required) - Generates JSON task sent to Python runner</li> <li>Technical Renderer (required) - Renders detailed technical report view</li> <li>Customer Metrics (optional) - Extracts data for customer-friendly report</li> <li>Print CSS (optional) - Service-specific print styles</li> </ol>"},{"location":"developer-guide/frontend-dev/#templating-with-lit-html","title":"Templating with lit-html","text":"<p>AutoService uses <code>lit-html</code> for efficient DOM updates and rendering:</p> <pre><code>import { html, render } from 'lit-html';\n\nconst name = \"AutoService\";\nconst count = 42;\n\n// Create template with interpolation  // (1)!\nconst template = html`\n  &lt;div&gt;\n    &lt;h1&gt;${name}&lt;/h1&gt;\n    &lt;p&gt;Count: ${count}&lt;/p&gt;\n    ${count &gt; 10 ? html`&lt;span&gt;Many items&lt;/span&gt;` : html`&lt;span&gt;Few items&lt;/span&gt;`}\n  &lt;/div&gt;\n`;\n\n// Render to element  // (2)!\nrender(template, document.getElementById('container'));\n\n// Event handling  // (3)!\nconst handleClick = (e) =&gt; console.log(\"Clicked!\");\nconst template2 = html`\n  &lt;button @click=${handleClick}&gt;Click me&lt;/button&gt;\n`;\n</code></pre> <ol> <li>Use <code>${}</code> for expressions, full HTML templates for conditional content</li> <li><code>render()</code> updates the DOM efficiently</li> <li>Use <code>@eventName</code> syntax for event listeners</li> </ol>"},{"location":"developer-guide/frontend-dev/#common-patterns","title":"Common Patterns","text":"LoopsConditionalsClass Binding <pre><code>const items = [\"Apple\", \"Banana\", \"Cherry\"];\n\nconst template = html`\n  &lt;ul&gt;\n    ${items.map(item =&gt; html`&lt;li&gt;${item}&lt;/li&gt;`)}\n  &lt;/ul&gt;\n`;\n</code></pre> <pre><code>const isLoading = true;\n\nconst template = html`\n  ${isLoading \n    ? html`&lt;div&gt;Loading...&lt;/div&gt;`\n    : html`&lt;div&gt;Loaded!&lt;/div&gt;`\n  }\n`;\n</code></pre> <pre><code>const isActive = true;\n\nconst template = html`\n  &lt;div class=${\"item \" + (isActive ? \"active\" : \"\")}&gt;\n    Content\n  &lt;/div&gt;\n`;\n</code></pre>"},{"location":"developer-guide/frontend-dev/#dom-manipulation","title":"DOM Manipulation","text":"<p>Vanilla JS patterns for common tasks:</p> Query ElementsCreate &amp; ModifyAdd/Remove from DOMEvent Listeners <pre><code>const element = document.getElementById(\"my-id\");  // (1)!\nconst elements = document.querySelectorAll(\".my-class\");  // (2)!\nconst first = document.querySelector(\".my-class\");  // (3)!\n</code></pre> <ol> <li>Get single element by ID</li> <li>Get all matching elements as NodeList</li> <li>Get first matching element</li> </ol> <pre><code>const div = document.createElement(\"div\");  // (1)!\ndiv.textContent = \"Hello\";\ndiv.className = \"my-class\";\ndiv.setAttribute(\"data-id\", \"123\");  // (2)!\ndiv.style.color = \"red\";  // (3)!\n</code></pre> <ol> <li>Create new DOM element</li> <li>Set custom attributes</li> <li>Apply inline styles</li> </ol> <pre><code>parent.appendChild(div);  // (1)!\nparent.insertBefore(div, sibling);  // (2)!\nelement.remove();  // (3)!\nparent.removeChild(child);\n</code></pre> <ol> <li>Add to end of parent</li> <li>Insert before specific sibling</li> <li>Remove element from DOM</li> </ol> <pre><code>// Add listener  // (1)!\nelement.addEventListener(\"click\", (event) =&gt; {\n  console.log(\"Clicked!\");\n});\n\n// Input change  // (2)!\ninput.addEventListener(\"change\", (event) =&gt; {\n  console.log(\"Value:\", event.target.value);\n});\n\n// Remove listener  // (3)!\nelement.removeEventListener(\"click\", handler);\n</code></pre> <ol> <li>Click events</li> <li>Input value changes  </li> <li>Stop listening to events</li> </ol>"},{"location":"developer-guide/frontend-dev/#state-management","title":"State Management","text":""},{"location":"developer-guide/frontend-dev/#sessionstorage-transient","title":"SessionStorage (Transient)","text":"<p>Cleared when tab closes - perfect for runtime data like pending runs and reports:</p> <pre><code>// Save data  // (1)!\nsessionStorage.setItem(\"service.pendingRun\", JSON.stringify(taskQueue));\n\n// Retrieve data  // (2)!\nconst taskQueue = JSON.parse(sessionStorage.getItem(\"service.pendingRun\") || \"null\");\n\n// Clear data  // (3)!\nsessionStorage.removeItem(\"service.pendingRun\");\n</code></pre> <ol> <li>Store any JSON-serializable data</li> <li>Parse string back to JavaScript object - use default <code>\"null\"</code> to prevent parsing errors</li> <li>Delete a specific key</li> </ol>"},{"location":"developer-guide/frontend-dev/#localstorage-persistent","title":"LocalStorage (Persistent)","text":"<p>Persists across sessions - for user preferences and fallback report storage:</p> <pre><code>// Save data\nlocalStorage.setItem(\"app.settings\", JSON.stringify(settings));\n\n// Retrieve data\nconst settings = JSON.parse(localStorage.getItem(\"app.settings\") || \"null\");\n\n// Clear all\nlocalStorage.clear();\n</code></pre> <p>Storage Keys in AutoService</p> <p>The app uses these standard keys:</p> SessionStorage KeysLocalStorage Keys <ul> <li><code>service.pendingRun</code> - Queued tasks</li> <li><code>service.finalReport</code> - Completed run results</li> <li><code>tool.statuses.v1</code> - Cached tool availability</li> </ul> <ul> <li><code>service.finalReport</code> - Backup report storage</li> <li>Business settings and app configuration</li> </ul>"},{"location":"developer-guide/frontend-dev/#running-services","title":"Running Services","text":"<p>Typical flow in service runner:</p> <pre><code>// In runner.js\nasync function runQueue() {\n  // Get pending tasks from sessionStorage\n  const tasks = JSON.parse(sessionStorage.getItem(\"service.pendingRun\"));\n\n  // Start runner via Tauri command\n  const result = await window.__TAURI__.core.invoke(\"start_service_run\", {\n    tasks: tasks\n  });\n\n  // Listen for progress\n  window.__TAURI__.event.listen(\"service_runner_line\", (event) =&gt; {\n    const line = event.payload;\n\n    // Parse task progress markers\n    if (line.startsWith(\"TASK_START:\")) {\n      updateUIForTaskStart(line);\n    } else if (line.startsWith(\"TASK_OK:\")) {\n      updateUIForTaskComplete(line);\n    }\n  });\n}\n</code></pre>"},{"location":"developer-guide/frontend-dev/#working-with-forms","title":"Working with Forms","text":"<pre><code>// Get form data\nconst form = document.getElementById(\"my-form\");\nconst formData = new FormData(form);\nconst data = Object.fromEntries(formData);\n\n// Validate and submit\nform.addEventListener(\"submit\", async (e) =&gt; {\n  e.preventDefault();\n\n  const data = Object.fromEntries(new FormData(form));\n\n  // Validate\n  if (!data.name) {\n    alert(\"Name is required\");\n    return;\n  }\n\n  // Submit\n  try {\n    await window.__TAURI__.core.invoke(\"save_data\", data);\n    alert(\"Saved successfully!\");\n  } catch (error) {\n    alert(\"Error: \" + error);\n  }\n});\n</code></pre>"},{"location":"developer-guide/frontend-dev/#styling","title":"Styling","text":""},{"location":"developer-guide/frontend-dev/#global-styles","title":"Global Styles","text":"<p><code>src/styles/core.css</code> contains global styles:</p> <pre><code>:root {\n  --color-primary: #0066cc;\n  --color-success: #00cc00;\n  --color-error: #ff0000;\n  --spacing-small: 4px;\n  --spacing-medium: 8px;\n  --spacing-large: 16px;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto;\n  background-color: #f5f5f5;\n  color: #333;\n}\n</code></pre>"},{"location":"developer-guide/frontend-dev/#page-specific-styles","title":"Page-Specific Styles","text":"<p>Create <code>src/styles/[page].css</code> for page-specific styling:</p> <pre><code>.my-page {\n  padding: var(--spacing-large);\n}\n\n.my-page .card {\n  background: white;\n  border-radius: 4px;\n  padding: var(--spacing-medium);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n</code></pre>"},{"location":"developer-guide/frontend-dev/#performance-tips","title":"Performance Tips","text":"<ol> <li>Lazy load resources - Only load code/styles for current page</li> <li>Minimize DOM operations - Batch updates when possible</li> <li>Use event delegation - Listen on parent instead of individual elements</li> <li>Cache computed values - Don't recalculate frequently</li> <li>Avoid inline styles - Use CSS classes instead</li> </ol>"},{"location":"developer-guide/frontend-dev/#debugging","title":"Debugging","text":""},{"location":"developer-guide/frontend-dev/#browser-devtools","title":"Browser DevTools","text":"<ol> <li>Press <code>Ctrl+Shift+I</code> to open DevTools</li> <li>Console tab for logs and errors</li> <li>Sources tab for breakpoints and stepping</li> <li>Elements tab for DOM inspection</li> <li>Network tab for API calls (IPC)</li> </ol>"},{"location":"developer-guide/frontend-dev/#common-devtools-commands","title":"Common DevTools Commands","text":"<pre><code>// Log object\nconsole.log(\"Value:\", obj);\n\n// Show error\nconsole.error(\"Error:\", err);\n\n// Create breakpoint\ndebugger;\n\n// Table view of array\nconsole.table(array);\n\n// Group logs\nconsole.group(\"My Group\");\nconsole.log(\"Item 1\");\nconsole.log(\"Item 2\");\nconsole.groupEnd();\n</code></pre> <p>Next: Backend Development</p>"},{"location":"developer-guide/overview/","title":"Developer Guide Overview","text":"<p>Welcome to the AutoService developer documentation. This comprehensive guide covers architecture, development workflows, and contribution guidelines for building and extending AutoService.</p>"},{"location":"developer-guide/overview/#what-youll-find","title":"What You'll Find","text":"<ul> <li> <p> Architecture</p> <p>Three-layer design with frontend, backend, and service runner.</p> <p> Learn more</p> </li> <li> <p> Development Setup</p> <p>Configure your environment for AutoService development.</p> <p> Get started</p> </li> <li> <p> Adding Services</p> <p>Create new diagnostic or maintenance services.</p> <p> Tutorial</p> </li> <li> <p> Frontend Dev</p> <p>Vanilla JS patterns with Vite and lit-html.</p> <p> Frontend guide</p> </li> <li> <p> Backend Dev</p> <p>Tauri commands and Rust patterns.</p> <p> Backend guide</p> </li> <li> <p> Python Runner</p> <p>Service execution engine architecture.</p> <p> Runner guide</p> </li> <li> <p> Portable Layout</p> <p>Data folder structure and organization.</p> <p> Layout guide</p> </li> <li> <p> Contributing</p> <p>Guidelines for contributing to the project.</p> <p> Contribute</p> </li> </ul>"},{"location":"developer-guide/overview/#key-technologies","title":"Key Technologies","text":"Frontend Backend Service Runner Technology Purpose HTML/CSS/JavaScript Vanilla JS, no framework overhead Vite Build tool with hot module replacement lit-html Lightweight HTML templating Fuse.js Fuzzy search functionality ApexCharts Data visualization and charts SortableJS Drag-and-drop task ordering Technology Purpose Rust Core application logic and safety Tauri 2 Cross-platform desktop framework Tokio Async runtime for non-blocking I/O sysinfo System information collection wgpu GPU detection and enumeration battery Battery health monitoring Technology Purpose Python 3.9+ Task execution and automation PyInstaller Package as standalone executable subprocess External tool orchestration Sentry SDK Error tracking and monitoring"},{"location":"developer-guide/overview/#project-structure","title":"Project Structure","text":"<pre><code>src/                       # Frontend code\n\u251c\u2500\u2500 main.js                # Hash-based router\n\u251c\u2500\u2500 pages/                 # Page modules\n\u2502   \u251c\u2500\u2500 service/           # Service automation\n\u2502   \u251c\u2500\u2500 programs/          # Program management\n\u2502   \u251c\u2500\u2500 scripts/           # Script catalog\n\u2502   \u251c\u2500\u2500 system-info/       # Hardware info\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 styles/                # CSS files\n\nsrc-tauri/                 # Rust backend\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 lib.rs             # Main library, command registration\n\u2502   \u251c\u2500\u2500 state.rs           # App state\n\u2502   \u251c\u2500\u2500 commands/          # IPC handlers\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 Cargo.toml             # Rust dependencies\n\nrunner/                    # Python service execution\n\u251c\u2500\u2500 service_runner.py      # Main entry point\n\u251c\u2500\u2500 services/              # Service implementations\n\u2502   \u251c\u2500\u2500 bleachbit_service.py\n\u2502   \u251c\u2500\u2500 sfc_service.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 requirements.txt       # Python dependencies\n\ndata/                      # Portable data folder\n\u251c\u2500\u2500 programs/              # External tools\n\u251c\u2500\u2500 settings/              # JSON configuration\n\u251c\u2500\u2500 reports/               # Generated reports\n\u2514\u2500\u2500 logs/                  # Execution logs\n</code></pre>"},{"location":"developer-guide/overview/#architecture-at-a-glance","title":"Architecture at a Glance","text":""},{"location":"developer-guide/overview/#three-layer-design","title":"Three-Layer Design","text":"<pre><code>graph TB\n    subgraph Frontend[\"\ud83d\udda5\ufe0f Frontend&lt;br/&gt;Vanilla JS + Vite\"]\n        A[\"Hash Router&lt;br/&gt;main.js\"]\n        B[\"Service Builder&lt;br/&gt;UI Components\"]\n        C[\"Report Rendering&lt;br/&gt;Print System\"]\n    end\n\n    subgraph Backend[\"\u2699\ufe0f Backend&lt;br/&gt;Rust + Tauri\"]\n        D[\"IPC Command&lt;br/&gt;Handlers\"]\n        E[\"File I/O&lt;br/&gt;System Info\"]\n        F[\"Process&lt;br/&gt;Management\"]\n    end\n\n    subgraph Runner[\"\ud83d\udc0d Service Runner&lt;br/&gt;Python Executor\"]\n        G[\"Task Dispatcher\"]\n        H[\"Service Modules\"]\n        I[\"Report Builder\"]\n    end\n\n    A --&gt;|Hash Routes| B\n    B --&gt;|Tauri Invoke| D\n    D --&gt;|Spawn Process| F\n    F --&gt;|Execute| G\n    G --&gt;|Run Tasks| H\n    H --&gt;|Generate| I\n    I --&gt;|JSON Report| D\n    D --&gt;|Tauri Events| C\n    C --&gt;|Display| A\n\n    style Frontend fill:#e1f5ff,stroke:#01579b\n    style Backend fill:#f3e5f5,stroke:#4a148c\n    style Runner fill:#e8f5e9,stroke:#1b5e20</code></pre>"},{"location":"developer-guide/overview/#data-flow-running-a-service","title":"Data Flow: Running a Service","text":"<ol> <li>User builds task queue in frontend (Service \u2192 Builder)</li> <li>Frontend generates JSON describing the run</li> <li>Frontend invokes Rust command <code>start_service_run</code></li> <li>Rust spawns Python subprocess with JSON</li> <li>Python executes tasks and streams progress to stderr</li> <li>Frontend listens for progress events</li> <li>Python returns final report to stdout</li> <li>Frontend displays results in Results view</li> </ol>"},{"location":"developer-guide/overview/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/overview/#initial-setup","title":"Initial Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/SonnyTaylor/AutoService.git\ncd AutoService\n\n# Install dependencies\npnpm install\npip install -r runner/requirements.txt\n\n# Run in development\npnpm tauri dev  # Requires admin terminal\n</code></pre>"},{"location":"developer-guide/overview/#making-changes","title":"Making Changes","text":"<ol> <li>Frontend changes - Auto-reload in dev mode</li> <li>Rust changes - Tauri rebuilds on save</li> <li>Python changes - Restart app to load new code</li> </ol>"},{"location":"developer-guide/overview/#building-for-production","title":"Building for Production","text":"<pre><code>pnpm tauri build\n</code></pre> <p>Output: <code>src-tauri/target/release/autoservice.exe</code></p>"},{"location":"developer-guide/overview/#key-concepts","title":"Key Concepts","text":""},{"location":"developer-guide/overview/#service-handler-system","title":"Service Handler System","text":"<p>All service logic is self-contained in <code>src/pages/service/handlers/[service_id]/</code>:</p> <ul> <li><code>index.js</code> - Service definition and renderers</li> <li><code>fixtures/</code> - Test data</li> </ul> <p>Each handler exports:</p> <ul> <li><code>definition</code> - Service metadata and task builder</li> <li><code>renderTech()</code> - Technical view renderer</li> <li><code>extractCustomerMetrics()</code> - Customer summary (optional)</li> <li><code>printCSS</code> - Print styles (optional)</li> </ul>"},{"location":"developer-guide/overview/#portable-data-directory","title":"Portable Data Directory","text":"<p>All tools and settings live in <code>data/</code>:</p> <ul> <li>Relative paths for USB portability</li> <li>Auto-normalization by Rust backend</li> <li>Accessed by frontend via IPC commands</li> </ul>"},{"location":"developer-guide/overview/#real-time-logging","title":"Real-Time Logging","text":"<p>Python services emit structured markers to stderr:</p> <pre><code>sys.stderr.write(\"TASK_START: service_name\\n\")\nsys.stderr.flush()  # Critical for real-time updates\n</code></pre> <p>Frontend parses these markers in <code>src/pages/service/runner.js</code>.</p>"},{"location":"developer-guide/overview/#common-tasks","title":"Common Tasks","text":""},{"location":"developer-guide/overview/#add-a-new-service","title":"Add a New Service","text":"<ol> <li>Create Python handler in <code>runner/services/new_service.py</code></li> <li>Register in <code>runner/service_runner.py</code></li> <li>Create frontend handler in <code>src/pages/service/handlers/new_service/</code></li> <li>Register handler in <code>src/pages/service/handlers/index.js</code></li> </ol> <p>See Adding a Service for details.</p>"},{"location":"developer-guide/overview/#add-a-tauri-command","title":"Add a Tauri Command","text":"<ol> <li>Create handler function in <code>src-tauri/src/</code></li> <li>Annotate with <code>#[tauri::command]</code></li> <li>Register in <code>src-tauri/src/lib.rs</code> handler list</li> </ol> <p>See Backend Development for details.</p>"},{"location":"developer-guide/overview/#add-a-new-page","title":"Add a New Page","text":"<ol> <li>Create HTML in <code>src/pages/[page]/[page].html</code></li> <li>Create controller in <code>src/pages/[page]/index.js</code></li> <li>Export <code>initPage()</code> function</li> <li>Router auto-loads based on hash</li> </ol> <p>See Frontend Development for details.</p>"},{"location":"developer-guide/overview/#before-contributing","title":"Before Contributing","text":"<ol> <li>Read the project README</li> <li>Check contributing guidelines</li> <li>Review architecture documentation</li> <li>Look at existing code patterns</li> <li>Test your changes thoroughly</li> </ol>"},{"location":"developer-guide/overview/#getting-help","title":"Getting Help","text":"<ul> <li>Questions? Check existing issues or create a new one</li> <li>Want to contribute? See Contributing</li> <li>Found a bug? Report it on GitHub Issues</li> </ul>"},{"location":"developer-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Development Setup - Set up your environment</li> <li>Architecture Deep Dive - Understand the design</li> <li>Adding a Service - Create new functionality</li> <li>Frontend Development - Work on UI</li> <li>Backend Development - Work on Rust backend</li> <li>Python Runner - Extend service capabilities</li> </ul> <p>Version: 0.4.0 | Last Updated: October 2025</p>"},{"location":"developer-guide/portable-layout/","title":"Portable Layout","text":"<p>Understanding and working with AutoService's portable data directory structure.</p>"},{"location":"developer-guide/portable-layout/#design-principles","title":"Design Principles","text":"<p>AutoService is built for portability:</p> <ul> <li>USB-friendly: Run from any USB drive</li> <li>No installation: No registry or system-wide changes</li> <li>Self-contained: All data travels with the executable</li> <li>User-controlled: All settings are editable JSON files</li> </ul>"},{"location":"developer-guide/portable-layout/#folder-structure","title":"Folder Structure","text":"<pre><code>AutoService.exe                 # Main executable\ndata/                          # Portable data folder\n\u251c\u2500\u2500 programs/                  # External tools\n\u2502   \u251c\u2500\u2500 BleachBit - 4.6.0/\n\u2502   \u251c\u2500\u2500 7-Zip - 25.01/\n\u2502   \u2514\u2500\u2500 YourTool - 1.0/\n\u251c\u2500\u2500 settings/                  # Configuration files\n\u2502   \u251c\u2500\u2500 app_settings.json\n\u2502   \u251c\u2500\u2500 programs.json\n\u2502   \u2514\u2500\u2500 scripts.json\n\u251c\u2500\u2500 reports/                   # Generated reports\n\u2502   \u251c\u2500\u2500 run_1234567890.json\n\u2502   \u2514\u2500\u2500 run_1234567890.log.txt\n\u251c\u2500\u2500 logs/                      # Execution logs\n\u2502   \u251c\u2500\u2500 run_plan_1234567890.log.txt\n\u2502   \u2514\u2500\u2500 service_runner_1234567890.log\n\u251c\u2500\u2500 resources/                 # Runtime resources\n\u2502   \u2514\u2500\u2500 bin/\n\u2502       \u2514\u2500\u2500 service_runner.exe\n\u2514\u2500\u2500 webview_profile/          # Tauri webview cache\n</code></pre>"},{"location":"developer-guide/portable-layout/#settings-files","title":"Settings Files","text":""},{"location":"developer-guide/portable-layout/#app_settingsjson","title":"app_settings.json","text":"<p>Global application configuration:</p> <pre><code>{\n  \"theme\": \"dark\",\n  \"auto_save_reports\": true,\n  \"report_format\": \"both\",\n  \"technician_mode\": false,\n  \"technician_info\": {\n    \"name\": \"John Doe\",\n    \"company\": \"Tech Services\",\n    \"phone\": \"555-1234\",\n    \"email\": \"john@tech.local\"\n  }\n}\n</code></pre>"},{"location":"developer-guide/portable-layout/#programsjson","title":"programs.json","text":"<p>Registered portable tools:</p> <pre><code>{\n  \"programs\": [\n    {\n      \"id\": \"bleachbit\",\n      \"name\": \"BleachBit\",\n      \"version\": \"4.6.0\",\n      \"path\": \"programs/BleachBit - 4.6.0/bleachbit.exe\",\n      \"description\": \"Clean up junk files\"\n    },\n    {\n      \"id\": \"7zip\",\n      \"name\": \"7-Zip\",\n      \"version\": \"25.01\",\n      \"path\": \"programs/7-Zip - 25.01/7z.exe\",\n      \"description\": \"Archive manager\"\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-guide/portable-layout/#scriptsjson","title":"scripts.json","text":"<p>User-maintained script catalog:</p> <pre><code>{\n  \"scripts\": [\n    {\n      \"id\": \"cleanup_temp\",\n      \"name\": \"Clean Temp Files\",\n      \"description\": \"Remove temporary files\",\n      \"type\": \"powershell\",\n      \"content\": \"Remove-Item -Path $env:TEMP -Recurse -Force\"\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-guide/portable-layout/#path-normalization","title":"Path Normalization","text":""},{"location":"developer-guide/portable-layout/#why-relative-paths","title":"Why Relative Paths?","text":"<p>Absolute paths break when USB drive letter changes:</p> <pre><code>D:\\data\\programs\\BleachBit\\bleachbit.exe  (Works on D:)\nE:\\data\\programs\\BleachBit\\bleachbit.exe  (Won't work, wrong drive)\n</code></pre> <p>Relative paths are portable:</p> <pre><code>data/programs/BleachBit/bleachbit.exe     (Works on any drive)\n</code></pre>"},{"location":"developer-guide/portable-layout/#rust-backend-normalization","title":"Rust Backend Normalization","text":"<p>The Rust backend automatically converts paths to be relative to the <code>data/</code> folder:</p> <pre><code>// When user sets: \"C:/Users/Data/AutoService/data/programs/BleachBit/bleachbit.exe\"\n// Backend stores: \"programs/BleachBit/bleachbit.exe\"\n\n// When loading: \"programs/BleachBit/bleachbit.exe\"\n// Backend expands: \"&lt;data_dir&gt;/programs/BleachBit/bleachbit.exe\"\n</code></pre>"},{"location":"developer-guide/portable-layout/#adding-tools-programmatically","title":"Adding Tools Programmatically","text":""},{"location":"developer-guide/portable-layout/#from-frontend","title":"From Frontend","text":"<pre><code>// Add tool via Tauri command\nconst toolInfo = {\n  id: \"mytool\",\n  name: \"My Tool\",\n  version: \"1.0\",\n  path: \"programs/My Tool - 1.0/mytool.exe\",\n  description: \"Does something useful\"\n};\n\nawait window.__TAURI__.core.invoke(\"save_program\", { program: toolInfo });\n</code></pre>"},{"location":"developer-guide/portable-layout/#manual-json-editing","title":"Manual (JSON Editing)","text":"<ol> <li>Add folder: <code>data/programs/My Tool - 1.0/</code></li> <li>Copy tool into folder</li> <li>Add entry to <code>data/settings/programs.json</code></li> <li>Restart AutoService</li> </ol>"},{"location":"developer-guide/portable-layout/#reports-and-logs","title":"Reports and Logs","text":""},{"location":"developer-guide/portable-layout/#report-storage","title":"Report Storage","text":"<p><code>data/reports/</code> contains:</p> <ul> <li>Generated maintenance reports (JSON)</li> <li>Customer-friendly reports (HTML/PDF)</li> <li>Technical analysis reports</li> </ul> <p>Naming convention:</p> <pre><code>run_&lt;timestamp&gt;.json        # Raw report\nrun_&lt;timestamp&gt;.log.txt     # Execution log\n</code></pre>"},{"location":"developer-guide/portable-layout/#log-storage","title":"Log Storage","text":"<p><code>data/logs/</code> contains execution logs:</p> <ul> <li>Service runner output</li> <li>Task execution logs</li> <li>Error messages and diagnostics</li> </ul>"},{"location":"developer-guide/portable-layout/#backup-and-sync","title":"Backup and Sync","text":""},{"location":"developer-guide/portable-layout/#what-to-backup","title":"What to Backup","text":"<p>Essential:</p> <ul> <li><code>data/settings/</code> - User configuration</li> <li><code>data/reports/</code> - Generated reports</li> <li><code>data/logs/</code> - Historical logs (optional)</li> </ul> <p>Optional:</p> <ul> <li><code>data/programs/</code> - Tools (can be re-downloaded)</li> <li><code>data/resources/</code> - Runtime resources (regenerated on build)</li> </ul>"},{"location":"developer-guide/portable-layout/#usb-setup-example","title":"USB Setup Example","text":"<pre><code># Copy to USB\nCopy-Item \"AutoService.exe\" \"E:\\\"\nCopy-Item \"data\" \"E:\\data\" -Recurse\n\n# Update on USB\nCopy-Item \"data/settings\" \"E:\\data\\settings\" -Recurse -Force\n</code></pre>"},{"location":"developer-guide/portable-layout/#troubleshooting-path-issues","title":"Troubleshooting Path Issues","text":""},{"location":"developer-guide/portable-layout/#tool-not-found-error","title":"\"Tool not found\" Error","text":"<p>Problem: Tool exists but AutoService can't find it</p> <p>Solution:</p> <ol> <li>Check <code>data/settings/programs.json</code> - is path correct?</li> <li>Verify tool exists: <code>data/programs/[Tool Name]/executable</code></li> <li>Try removing and re-adding the tool</li> <li>Check <code>data/logs/</code> for specific error</li> </ol>"},{"location":"developer-guide/portable-layout/#reports-not-saving","title":"Reports not saving","text":"<p>Problem: Reports are generated but not saved</p> <p>Solution:</p> <ol> <li>Check <code>data/reports/</code> has write permissions</li> <li>Verify <code>data/settings/app_settings.json</code> has <code>\"auto_save_reports\": true</code></li> <li>Check available disk space</li> <li>Look in <code>data/logs/</code> for errors</li> </ol>"},{"location":"developer-guide/portable-layout/#settings-not-persisting","title":"Settings not persisting","text":"<p>Problem: Changes lost after restart</p> <p>Solution:</p> <ol> <li>Verify <code>data/settings/</code> is writable</li> <li>Check JSON syntax in settings files</li> <li>Restart AutoService if changes are recent</li> <li>Look for file lock issues</li> </ol>"},{"location":"developer-guide/portable-layout/#development-using-portable-layout","title":"Development: Using Portable Layout","text":""},{"location":"developer-guide/portable-layout/#during-development","title":"During Development","text":"<p>Frontend can access data folder:</p> <pre><code>// Get data paths\nconst dataPaths = await window.__TAURI__.core.invoke(\"get_data_dirs\");\nconsole.log(\"Data folder:\", dataPaths.data_dir);\n</code></pre>"},{"location":"developer-guide/portable-layout/#building-for-distribution","title":"Building for Distribution","text":"<pre><code># Build executable\npnpm tauri build\n\n# Output locations\nsrc-tauri/target/release/autoservice.exe   # Executable\nsrc-tauri/target/release/bundle/           # Installer\n\n# Copy data folder alongside exe\nCopy-Item \"data\" \"src-tauri/target/release/data\" -Recurse\n\n# Distribute together\n# - autoservice.exe\n# - data/\n</code></pre>"},{"location":"developer-guide/portable-layout/#performance-notes","title":"Performance Notes","text":"<ul> <li>Path resolution cached during app startup</li> <li>Tool availability cached in sessionStorage</li> <li>Settings loaded once at startup</li> <li>Minimize I/O for better responsiveness</li> </ul> <p>Next: Contributing</p>"},{"location":"developer-guide/python-runner/","title":"Python Runner","text":"<p>The Python service runner executes maintenance and diagnostic tasks asynchronously.</p>"},{"location":"developer-guide/python-runner/#overview","title":"Overview","text":"<p>The Python runner (<code>runner/service_runner.py</code>) is responsible for:</p> <ul> <li>Parsing task definitions (from JSON)</li> <li>Executing tasks sequentially</li> <li>Streaming progress to stderr</li> <li>Generating final reports</li> <li>Handling errors and timeouts</li> </ul>"},{"location":"developer-guide/python-runner/#running-the-service-runner","title":"Running the Service Runner","text":""},{"location":"developer-guide/python-runner/#direct-execution","title":"Direct Execution","text":"<pre><code>python runner/service_runner.py runner/fixtures/test_bleachbit.json\n</code></pre>"},{"location":"developer-guide/python-runner/#with-output-file","title":"With Output File","text":"<pre><code>python runner/service_runner.py runner/fixtures/test_bleachbit.json --output-file data/reports/result.json\n</code></pre>"},{"location":"developer-guide/python-runner/#command-line-help","title":"Command-Line Help","text":"<pre><code>python runner/service_runner.py --help\n</code></pre>"},{"location":"developer-guide/python-runner/#input-format","title":"Input Format","text":"<p>Services are defined as JSON tasks:</p> <pre><code>{\n  \"tasks\": [\n    {\n      \"type\": \"bleachbit_clean\",\n      \"params\": {}\n    },\n    {\n      \"type\": \"sfc_scan\",\n      \"params\": {}\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-guide/python-runner/#output-format","title":"Output Format","text":""},{"location":"developer-guide/python-runner/#task-result","title":"Task Result","text":"<p>Each task returns:</p> <pre><code>{\n    \"task_type\": \"bleachbit_clean\",\n    \"status\": \"success\",           # success, error, warning, skipped\n    \"summary\": {\n        \"human_readable\": {        # User-friendly data\n            \"status\": \"Complete\",\n            \"items_cleaned\": 1247\n        },\n        \"results\": {               # Raw technical data\n            \"output\": \"...\",\n            \"files_removed\": [...]\n        }\n    },\n    \"duration_seconds\": 45.23\n}\n</code></pre>"},{"location":"developer-guide/python-runner/#final-report","title":"Final Report","text":"<pre><code>{\n    \"tasks\": [\n        { /* ... task results ... */ }\n    ],\n    \"status\": \"ok\",\n    \"total_duration_seconds\": 120.45,\n    \"run_timestamp\": \"2024-10-27T12:34:56Z\"\n}\n</code></pre>"},{"location":"developer-guide/python-runner/#progress-markers","title":"Progress Markers","text":"<p>The runner emits markers to stderr for real-time UI updates:</p> <pre><code>TASK_START: task_id\nTASK_OK: task_id | success\nTASK_FAIL: task_id | error_message\nTASK_SKIP: task_id | reason\nPROGRESS_JSON: {...}\nPROGRESS_JSON_FINAL: {...}\n</code></pre> <p>Critical: Always <code>flush()</code> after markers:</p> <pre><code>sys.stderr.write(\"TASK_OK: my_service\\n\")\nsys.stderr.flush()  # Without this, updates batch and delay\n</code></pre>"},{"location":"developer-guide/python-runner/#creating-a-service","title":"Creating a Service","text":""},{"location":"developer-guide/python-runner/#service-function-signature","title":"Service Function Signature","text":"<pre><code>def run_my_service(task: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Execute my_service task.\n\n    Args:\n        task: Task definition with parameters\n\n    Returns:\n        Standard service result dictionary\n    \"\"\"\n    try:\n        # Get parameters\n        params = task.get(\"params\", {})\n\n        # Do work\n        result = do_work(params)\n\n        # Return success\n        return {\n            \"task_type\": \"my_service\",\n            \"status\": \"success\",\n            \"summary\": {\n                \"human_readable\": {\n                    \"result\": \"OK\"\n                },\n                \"results\": result\n            },\n            \"duration_seconds\": 1.23\n        }\n    except Exception as e:\n        # Return error\n        return {\n            \"task_type\": \"my_service\",\n            \"status\": \"error\",\n            \"summary\": {\n                \"human_readable\": {\n                    \"error\": str(e)\n                },\n                \"results\": {}\n            },\n            \"duration_seconds\": 0\n        }\n</code></pre>"},{"location":"developer-guide/python-runner/#register-in-service-runner","title":"Register in Service Runner","text":"<p>Add to <code>TASK_HANDLERS</code> in <code>runner/service_runner.py</code>:</p> <pre><code>from services.my_service import run_my_service\n\nTASK_HANDLERS = {\n    \"my_service\": run_my_service,\n}\n</code></pre>"},{"location":"developer-guide/python-runner/#example-simple-service","title":"Example: Simple Service","text":"<pre><code># runner/services/hello_service.py\n\nimport time\nimport sys\n\ndef run_hello_service(task):\n    \"\"\"Simple hello service example.\"\"\"\n    try:\n        sys.stderr.write(\"TASK_START: hello_service\\n\")\n        sys.stderr.flush()\n\n        # Get parameters\n        name = task.get(\"params\", {}).get(\"name\", \"World\")\n\n        # Do work\n        time.sleep(2)\n\n        sys.stderr.write(\"TASK_OK: hello_service\\n\")\n        sys.stderr.flush()\n\n        return {\n            \"task_type\": \"hello_service\",\n            \"status\": \"success\",\n            \"summary\": {\n                \"human_readable\": {\n                    \"message\": f\"Hello, {name}!\"\n                },\n                \"results\": {\n                    \"timestamp\": str(time.time())\n                }\n            },\n            \"duration_seconds\": 2.0\n        }\n    except Exception as e:\n        sys.stderr.write(f\"TASK_FAIL: hello_service | {str(e)}\\n\")\n        sys.stderr.flush()\n\n        return {\n            \"task_type\": \"hello_service\",\n            \"status\": \"error\",\n            \"summary\": {\n                \"human_readable\": {\"error\": str(e)},\n                \"results\": {}\n            },\n            \"duration_seconds\": 0\n        }\n</code></pre>"},{"location":"developer-guide/python-runner/#subprocess-execution","title":"Subprocess Execution","text":"<p>Running external programs:</p> <pre><code>import subprocess\n\ndef run_external_tool(exe_path, args=None):\n    \"\"\"Run external tool and capture output.\"\"\"\n    try:\n        cmd = [exe_path] + (args or [])\n\n        result = subprocess.run(\n            cmd,\n            capture_output=True,\n            text=True,\n            timeout=300,  # 5 minutes\n            check=False   # Don't raise on non-zero exit\n        )\n\n        return {\n            \"stdout\": result.stdout,\n            \"stderr\": result.stderr,\n            \"returncode\": result.returncode\n        }\n    except subprocess.TimeoutExpired:\n        return {\"error\": \"Task timed out\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"developer-guide/python-runner/#error-handling","title":"Error Handling","text":""},{"location":"developer-guide/python-runner/#graceful-failures","title":"Graceful Failures","text":"<p>Always return proper error status:</p> <pre><code>try:\n    result = do_work()\nexcept FileNotFoundError:\n    return {\n        \"task_type\": \"my_service\",\n        \"status\": \"error\",\n        \"summary\": {\n            \"human_readable\": {\n                \"error\": \"Required file not found\"\n            },\n            \"results\": {}\n        },\n        \"duration_seconds\": 0\n    }\nexcept TimeoutError:\n    return {\n        \"task_type\": \"my_service\",\n        \"status\": \"warning\",\n        \"summary\": {\n            \"human_readable\": {\n                \"warning\": \"Operation timed out\"\n            },\n            \"results\": {}\n        },\n        \"duration_seconds\": timeout_secs\n    }\n</code></pre>"},{"location":"developer-guide/python-runner/#testing-services","title":"Testing Services","text":""},{"location":"developer-guide/python-runner/#create-test-fixture","title":"Create Test Fixture","text":"<p><code>runner/fixtures/test_my_service.json</code>:</p> <pre><code>{\n  \"tasks\": [\n    {\n      \"type\": \"my_service\",\n      \"params\": {\n        \"name\": \"Test\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-guide/python-runner/#run-test","title":"Run Test","text":"<pre><code>python runner/service_runner.py runner/fixtures/test_my_service.json\n</code></pre>"},{"location":"developer-guide/python-runner/#verify-output","title":"Verify Output","text":"<p>Check the returned JSON for:</p> <ul> <li>Correct <code>task_type</code></li> <li>Valid <code>status</code> (success/error/warning)</li> <li>Populated <code>summary</code> with both <code>human_readable</code> and <code>results</code></li> <li>Positive <code>duration_seconds</code></li> </ul>"},{"location":"developer-guide/python-runner/#best-practices","title":"Best Practices","text":"<ol> <li>Error handling - Always return proper status and messages</li> <li>Progress markers - Emit markers for long-running tasks</li> <li>Timeouts - Set reasonable timeouts for subprocess calls</li> <li>Cleanup - Close file handles and processes properly</li> <li>Logging - Use stderr for debug output</li> <li>Performance - Profile slow operations</li> <li>Dependencies - Add requirements to <code>requirements.txt</code></li> <li>Testing - Test with fixtures before production use</li> </ol>"},{"location":"developer-guide/python-runner/#debugging","title":"Debugging","text":""},{"location":"developer-guide/python-runner/#run-with-python-debugger","title":"Run with Python Debugger","text":"<pre><code>python -m pdb runner/service_runner.py runner/fixtures/test_my_service.json\n</code></pre>"},{"location":"developer-guide/python-runner/#add-debug-output","title":"Add Debug Output","text":"<pre><code>import sys\n\n# Write to stderr (visible in logs)\nsys.stderr.write(f\"DEBUG: value = {value}\\n\")\nsys.stderr.flush()\n\n# Write to stdout (goes to final report)\nprint(f\"Output: {value}\")\n</code></pre>"},{"location":"developer-guide/python-runner/#check-logs","title":"Check Logs","text":"<p>AutoService writes runner logs to <code>data/logs/</code>:</p> <pre><code>data/logs/\n\u251c\u2500\u2500 run_plan_1234567890.json      # Task plan\n\u2514\u2500\u2500 run_plan_1234567890.log.txt   # Runner output\n</code></pre> <p>Next: Portable Layout</p>"},{"location":"user-guide/component-tests/","title":"Component Tests","text":"<p>The Component Tests tab allows you to test individual hardware components to verify they're working properly.</p>"},{"location":"user-guide/component-tests/#overview","title":"Overview","text":"<p>Component tests let you verify:</p> <ul> <li>Camera: Webcam functionality</li> <li>Microphone: Audio input quality</li> <li>Speakers: Audio output quality</li> <li>Display: Screen and color accuracy</li> <li>Keyboard: Input detection</li> <li>Mouse: Pointer and button functionality</li> <li>Network: Connectivity verification</li> </ul>"},{"location":"user-guide/component-tests/#running-a-component-test","title":"Running a Component Test","text":"<ol> <li>Click the Component Tests tab</li> <li>Select the component you want to test</li> <li>Follow the on-screen instructions</li> <li>Verify the component is working as expected</li> <li>Move to the next test or close</li> </ol>"},{"location":"user-guide/component-tests/#camera-test","title":"Camera Test","text":""},{"location":"user-guide/component-tests/#what-it-tests","title":"What It Tests","text":"<ul> <li>Camera availability and detection</li> <li>Video stream quality</li> <li>Resolution capabilities</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use","title":"How to Use","text":"<ol> <li>Click Camera</li> <li>Grant permission if prompted</li> <li>You should see video from your camera</li> <li>Test if the video is clear and in color</li> <li>Check if the image is right-side-up</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails","title":"If It Fails","text":"<ul> <li>Ensure camera is not disabled in Device Manager</li> <li>Check for dirt on camera lens</li> <li>Try a different application to verify camera works</li> <li>Update camera drivers</li> </ul>"},{"location":"user-guide/component-tests/#microphone-test","title":"Microphone Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_1","title":"What It Tests","text":"<ul> <li>Microphone availability</li> <li>Audio input levels</li> <li>Recording quality</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_1","title":"How to Use","text":"<ol> <li>Click Microphone</li> <li>Grant permission if prompted</li> <li>Speak into microphone</li> <li>Monitor input level indicator</li> <li>Verify you hear playback</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_1","title":"If It Fails","text":"<ul> <li>Ensure microphone is not disabled in Device Manager</li> <li>Check physical mute switches or mute buttons</li> <li>Verify microphone is not muted in Windows Sound settings</li> <li>Try different microphone if available</li> <li>Update audio drivers</li> </ul>"},{"location":"user-guide/component-tests/#speakers-test","title":"Speakers Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_2","title":"What It Tests","text":"<ul> <li>Speaker functionality</li> <li>Audio output quality</li> <li>Volume control</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_2","title":"How to Use","text":"<ol> <li>Click Speakers</li> <li>Click Play Sound</li> <li>Listen for test audio (tone, music, or voice)</li> <li>Verify sound is clear and at appropriate volume</li> <li>Test both speakers if stereo</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_2","title":"If It Fails","text":"<ul> <li>Ensure volume is not muted or too low</li> <li>Check physical volume controls</li> <li>Verify speakers are powered on</li> <li>Test speakers with another audio source</li> <li>Update audio drivers</li> </ul>"},{"location":"user-guide/component-tests/#display-test","title":"Display Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_3","title":"What It Tests","text":"<ul> <li>Display resolution and color</li> <li>Pixel functionality</li> <li>Screen orientation</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_3","title":"How to Use","text":"<ol> <li>Click Display</li> <li>Full-screen test patterns will be shown</li> <li>Verify colors are accurate (reds, greens, blues)</li> <li>Check for dead pixels or discoloration</li> <li>Test brightness and contrast range</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_3","title":"If It Fails","text":"<ul> <li>Adjust brightness/contrast on monitor</li> <li>Check for physical damage to screen</li> <li>Try different resolution settings</li> <li>Update graphics drivers</li> <li>Clean screen if dirty</li> </ul>"},{"location":"user-guide/component-tests/#keyboard-test","title":"Keyboard Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_4","title":"What It Tests","text":"<ul> <li>Key input detection</li> <li>Key responsiveness</li> <li>Layout verification</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_4","title":"How to Use","text":"<ol> <li>Click Keyboard</li> <li>Press keys on keyboard</li> <li>Each keystroke should be detected and displayed</li> <li>Test all keys for responsiveness</li> <li>Verify correct key mapping for your layout</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_4","title":"If It Fails","text":"<ul> <li>Clean keyboard if stuck keys detected</li> <li>Check for keyboard damage</li> <li>Update keyboard drivers</li> <li>Try different USB port or wireless receiver</li> <li>Check Device Manager for keyboard devices</li> </ul>"},{"location":"user-guide/component-tests/#mouse-test","title":"Mouse Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_5","title":"What It Tests","text":"<ul> <li>Mouse pointer movement</li> <li>Button functionality</li> <li>Click responsiveness</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_5","title":"How to Use","text":"<ol> <li>Click Mouse</li> <li>Move mouse around the screen</li> <li>Click and drag to verify pointer movement</li> <li>Click left, right, and middle buttons</li> <li>Verify all buttons respond</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_5","title":"If It Fails","text":"<ul> <li>Clean mouse sensors and optical area</li> <li>Check mouse battery if wireless</li> <li>Replace mouse batteries or USB receiver</li> <li>Try different USB port</li> <li>Update mouse drivers</li> </ul>"},{"location":"user-guide/component-tests/#network-test","title":"Network Test","text":""},{"location":"user-guide/component-tests/#what-it-tests_6","title":"What It Tests","text":"<ul> <li>Network connectivity</li> <li>Ping to gateway/internet</li> <li>Network interface detection</li> </ul>"},{"location":"user-guide/component-tests/#how-to-use_6","title":"How to Use","text":"<ol> <li>Click Network</li> <li>View detected network adapters</li> <li>Check ping to gateway</li> <li>Verify network connectivity status</li> <li>Check IP address configuration</li> </ol>"},{"location":"user-guide/component-tests/#if-it-fails_6","title":"If It Fails","text":"<ul> <li>Check physical network cable or WiFi antenna</li> <li>Ensure WiFi is enabled (may have physical switch)</li> <li>Restart network adapter in Device Manager</li> <li>Restart router if network is down</li> <li>Update network drivers</li> </ul>"},{"location":"user-guide/component-tests/#tips","title":"Tips","text":"<ul> <li>Quick diagnosis: Use component tests to isolate hardware issues</li> <li>Before/after: Test components before and after maintenance</li> <li>Document results: Take screenshots of test results for troubleshooting</li> <li>Systematic testing: Test components in order for thoroughness</li> <li>Multiple tests: Run critical component tests twice to verify consistency</li> </ul> <p>Next: Settings Tab</p>"},{"location":"user-guide/getting-started/","title":"Getting Started with AutoService","text":""},{"location":"user-guide/getting-started/#initial-setup","title":"Initial Setup","text":"<p>Prerequisites</p> Operating SystemPermissionsDisk Space <ul> <li>Windows 10 (20H1 or later)</li> <li>Windows 11 (all versions)</li> </ul> <ul> <li>Administrator access for diagnostic tasks</li> <li>UAC approval for elevated operations</li> </ul> <ul> <li>100 MB minimum for app + logs</li> <li>Additional space for tool downloads</li> </ul>"},{"location":"user-guide/getting-started/#download-extract","title":"Download &amp; Extract","text":"Step 1: DownloadStep 2: ExtractStep 3: Verify Structure <p>Download the latest AutoService release:</p> <p> GitHub Releases</p> <p>Move the .exe to the USB and extract the /data folder alongside it.</p> <p>Ensure you have these files (some may be created on first run):</p> Expected Directory Structure<pre><code>\ud83d\udcc2 AutoService/\n\u251c\u2500\u2500 \ud83d\udcc4 AutoService.exe       # Main application\n\u2514\u2500\u2500 \ud83d\udcc2 data/                 # Data folder\n    \u251c\u2500\u2500 \ud83d\udcc2 programs/         # External tools\n    \u251c\u2500\u2500 \ud83d\udcc2 resources/        # App resources\n    \u251c\u2500\u2500 \ud83d\udcc2 settings/         # Configuration\n    \u251c\u2500\u2500 \ud83d\udcc2 reports/          # Generated reports\n    \u2514\u2500\u2500 \ud83d\udcc2 logs/             # Execution logs\n</code></pre>"},{"location":"user-guide/getting-started/#first-launch","title":"First Launch","text":"<p>Administrator Privileges Required</p> <p>AutoService requires administrator privileges for most diagnostic tasks.</p> <p>How to launch:</p> <ol> <li>Right-click <code>AutoService.exe</code></li> <li>Select \"Run as administrator\"</li> <li>Accept the UAC prompt</li> </ol> <p>What Happens on First Launch</p> <ol> <li> Application initializes</li> <li> Data folder is validated</li> <li> Default settings are loaded</li> <li> Interface opens with tabs visible</li> </ol>"},{"location":"user-guide/getting-started/#understanding-the-main-interface","title":"Understanding the Main Interface","text":"<p>AutoService uses a clean tab-based interface for easy navigation:</p> Tab Purpose Service Run automated maintenance &amp; diagnostics System Info View hardware and OS details Component Test Test hardware components Shortcuts Quick links to Windows tools Tab Purpose Programs Manage portable tools Scripts Execute PowerShell/CMD scripts Reports Access previous reports Settings Configure AutoService"},{"location":"user-guide/getting-started/#your-first-maintenance-run","title":"Your First Maintenance Run","text":"<p>Follow these steps to run your first automated maintenance session:</p> 1. Navigate to Service Tab2. Select Services3. Build Your Queue4. Run Queue5. Review Results <p>Click the Service tab at the top of the window.</p> <p>Interface Layout:</p> <ul> <li>Left Panel: Available services organized by category</li> <li>Right Panel: Your task queue (drag to reorder)</li> <li>Top Bar: Run controls and presets</li> </ul> <p>Browse and select services by category:</p> Category Examples Diagnostics Disk checks, SMART reports, battery health Cleanup BleachBit, AdwCleaner, temp files Security KVRT scan, Stinger scan Stress Tests CPU, GPU, memory tests Maintenance Windows Update, SFC, DISM <p>Click a service to add it to your queue.</p> <p>Customize your task sequence:</p> <ul> <li>Drag &amp; Drop: Reorder tasks vertically</li> <li>Remove: Click  to remove a task</li> <li>Configure: Adjust parameters (duration, options)</li> <li>Save Preset: Save queue for reuse</li> </ul> <p>Click Run to begin execution.</p> <p>Live Feedback:</p> <ul> <li> Task Progress: Real-time status for each task</li> <li>\ud83d\udcca Duration: Elapsed and estimated time</li> <li>\ud83d\udcdd Output: Live logs from tools</li> <li>\ud83d\udd14 Notifications: Audio alerts on completion</li> </ul> <p>View comprehensive results after completion:</p> <p>Two Report Types:</p> Report Type Audience Content Technical Technicians Full diagnostic data, raw outputs, detailed findings Customer End Users Simplified summary, recommendations, key metrics"},{"location":"user-guide/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>AutoService Won't Start</p> <p>Symptoms: Double-click does nothing or immediate crash</p> <p>Solutions:</p> <ol> <li>Right-click \u2192 \"Run as administrator\"</li> <li>Verify Windows 10+ (20H1 or later)</li> <li>Check <code>data/</code> folder exists beside EXE</li> <li>Review <code>data/logs/</code> for error details</li> <li>Temporarily disable antivirus</li> <li>Re-extract from original ZIP</li> </ol> <p>Tasks Keep Failing</p> <p>Symptoms: Tasks show error status repeatedly</p> <p>Solutions:</p> <ol> <li>Go to Settings \u2192 Tools tab</li> <li>Verify required tools are installed</li> <li>Update outdated tool versions</li> <li>Ensure administrator access</li> <li>Check <code>data/logs/</code> for specifics</li> <li>Run individual tools manually to test</li> </ol> <p>Reports Not Generating</p> <p>Symptoms: No report after queue completion</p> <p>Solutions:</p> <ol> <li>Check free disk space (need \u2265 50MB)</li> <li>Verify write permissions in <code>data/</code></li> <li>Look in <code>data/reports/</code> manually</li> <li>Check for antivirus quarantine</li> <li>Run AutoService as administrator</li> <li>Review <code>data/logs/</code> for errors</li> </ol> <p>Slow Performance</p> <p>Symptoms: UI freezes or tasks take too long</p> <p>Solutions:</p> <ol> <li>Close other resource-heavy apps</li> <li>Check Task Manager for conflicts</li> <li>Reduce stress test durations</li> <li>Run fewer tasks simultaneously</li> <li>Check drive health (SMART report)</li> <li>Ensure adequate RAM (4GB+ recommended)</li> </ol> <p>Still Having Issues?</p> <p>Get Help:</p> <ol> <li>Check existing GitHub Issues</li> <li>Search the documentation</li> <li>Open a new issue with:<ul> <li>Windows version</li> <li>AutoService version</li> <li>Steps to reproduce</li> <li>Error logs from <code>data/logs/</code></li> </ul> </li> </ol>"},{"location":"user-guide/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ul> <li>Learn about the Service Tab - Deep dive into task automation</li> <li>Explore Programs Tab - Manage portable tools</li> <li>Configure Settings - Customize AutoService behavior</li> <li>View System Information - Understand your hardware</li> </ul> <p>Need Help? Check the Overview for more details on what AutoService can do, or visit the GitHub Issues page.</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":""},{"location":"user-guide/overview/#what-you-can-do-with-autoservice","title":"What You Can Do With AutoService","text":"<p>AutoService is a comprehensive toolkit designed to make computer maintenance and diagnostics faster and more consistent. Whether you're a technician servicing multiple systems or a power user maintaining your own machine, AutoService provides a unified interface to run complex maintenance routines.</p>"},{"location":"user-guide/overview/#core-capabilities","title":"Core Capabilities","text":"<ul> <li> <p> Automated Maintenance</p> <p>Queue and execute multiple tools:</p> <ul> <li>Cleanup: BleachBit, AdwCleaner, Drive Cleanup</li> <li>Maintenance: Windows Update, SFC, DISM</li> <li>Diagnostics: CHKDSK, SMART reports, battery health</li> <li>Security: KVRT, Trellix Stinger scans</li> </ul> </li> <li> <p> System Information</p> <p>Complete hardware &amp; software snapshot:</p> <ul> <li>Processor details and capabilities</li> <li>Memory configuration</li> <li>Storage and drive information</li> <li>Battery status and health</li> <li>Operating system details</li> <li>GPU and display information</li> </ul> </li> <li> <p> Component Testing</p> <p>Validate individual hardware:</p> <ul> <li>Camera: Webcam functionality</li> <li>Microphone: Audio input testing</li> <li>Speakers: Audio output validation</li> <li>Display: Screen and color tests</li> <li>Input Devices: Keyboard &amp; mouse</li> <li>Network: Connectivity checks</li> </ul> </li> <li> <p> Portable Tools</p> <p>Manage external applications:</p> <ul> <li>Launch tools from <code>data/programs/</code></li> <li>Add custom tools without code changes</li> <li>Organize by category</li> <li>Quick access from UI</li> </ul> </li> <li> <p> Script Management</p> <p>Execute automation scripts:</p> <ul> <li>PowerShell and CMD support</li> <li>Catalog frequently used scripts</li> <li>Run directly from interface</li> <li>Manage script library</li> </ul> </li> <li> <p> Report Generation</p> <p>Two report types:</p> <ul> <li>Technical: Full diagnostic data</li> <li>Customer: Simplified summaries</li> <li>Export as PDF, JSON, or HTML</li> <li>Auto-save after runs</li> </ul> </li> </ul>"},{"location":"user-guide/overview/#main-interface-areas","title":"Main Interface Areas","text":"<p>AutoService is organized into tabs across the top of the window:</p> Tab Purpose Service Run automated maintenance and diagnostic tasks using the queue builder System Info View detailed hardware and OS information Component Test Test individual hardware components Shortcuts Quick links to Windows management tools Programs Launch portable tools and utilities Scripts Run and manage PowerShell/CMD scripts Reports Access previously generated reports Settings Configure AutoService behavior and preferences <p>Portable Design</p> <p>AutoService is designed to work from a USB drive or any location alongside a <code>data/</code> folder. Keep the executable and data folder together for full functionality.</p> <pre><code>AutoService.exe            # Main application\ndata/\n\u251c\u2500\u2500 programs/              # Your portable tools\n\u251c\u2500\u2500 resources/             # Autoservice executables and assets\n\u251c\u2500\u2500 settings/              # Configuration files\n\u251c\u2500\u2500 reports/               # Generated reports\n\u2514\u2500\u2500 logs/                  # Execution logs from AutoService and other tools\n</code></pre> <p>This portability means: - Run from USB on any Windows system - Configurations and tools travel with the executable - No installation required - Leave no traces on the host system</p>"},{"location":"user-guide/overview/#typical-workflow","title":"Typical Workflow","text":"<p>A typical technician workflow looks like this:</p> <ol> <li>Open AutoService on the target system</li> <li>Navigate to the Service tab and select maintenance tasks from the catalog</li> <li>Build a queue of tasks you want to run (drag to reorder if needed)</li> <li>Execute the queue with one click</li> <li>View live progress as tasks execute</li> <li>Review results with detailed technical or customer-friendly reports</li> <li>Save or export the report for records or customer handoff</li> </ol> <p>What You'll Need</p>"},{"location":"user-guide/overview/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Windows 10 or later</li> <li>Administrator access for some tasks (UAC prompt will appear as needed)</li> <li>The <code>data/</code> folder alongside the AutoService executable</li> </ul>"},{"location":"user-guide/overview/#recommended","title":"Recommended","text":"<ul> <li>4GB RAM for stress testing</li> <li>Portable tools installed in <code>data/programs/</code> (setup during initialization)</li> <li>Network connection for online tests and updates</li> </ul>"},{"location":"user-guide/overview/#getting-help","title":"Getting Help","text":"<p>Each tab in AutoService includes helpful tooltips and descriptions. Hover over icons and labels to learn more about specific features. The Settings tab also provides configuration explanations.</p> <p>For technical questions or to report issues, visit the GitHub repository.</p> <p>Next: Getting Started \u2192</p>"},{"location":"user-guide/programs-tab/","title":"Programs Tab","text":"<p>The Programs tab lets you manage and launch portable tools and utilities stored in the <code>data/programs/</code> folder.</p>"},{"location":"user-guide/programs-tab/#overview","title":"Overview","text":"<p>The Programs tab displays:</p> <ul> <li>Available programs organized in a grid or list view</li> <li>Program details (name, version, path)</li> <li>Launch buttons to run programs</li> <li>Add/Remove options to manage your program collection</li> </ul>"},{"location":"user-guide/programs-tab/#viewing-your-programs","title":"Viewing Your Programs","text":"<p>Programs are displayed with:</p> <ul> <li>Program icon (if available)</li> <li>Program name</li> <li>Version (if specified)</li> <li>Description (if available)</li> <li>Launch button</li> </ul>"},{"location":"user-guide/programs-tab/#launching-a-program","title":"Launching a Program","text":"<ol> <li>Find the program you want to launch</li> <li>Click the \"Launch\" or \"Run\" button</li> <li>The program will start in its own window</li> <li>AutoService remains open in the background</li> </ol>"},{"location":"user-guide/programs-tab/#adding-new-programs","title":"Adding New Programs","text":"<p>To add a new portable tool to AutoService:</p> <ol> <li>Create a folder in <code>data/programs/</code> with the tool name</li> <li>Format: <code>ToolName - Version</code> (e.g., <code>BleachBit - 4.6.0</code>)</li> <li>Copy your tool files into the new folder</li> <li>Press \"Add Program\" in the Programs tab</li> <li>Browse to the executable file of the tool you added</li> <li>Your program should now appear in the Programs tab</li> </ol>"},{"location":"user-guide/programs-tab/#program-organization","title":"Program Organization","text":"<p>Keep your <code>data/programs/</code> folder organized:</p> <pre><code>data/programs/\n\u251c\u2500\u2500 BleachBit - 4.6.0/\n\u2502   \u251c\u2500\u2500 bleachbit.exe\n\u2502   \u251c\u2500\u2500 library/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 7-Zip - 25.01/\n\u2502   \u251c\u2500\u2500 7z.exe\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 YourTool - 1.0/\n    \u251c\u2500\u2500 yourapp.exe\n    \u2514\u2500\u2500 config.ini\n</code></pre>"},{"location":"user-guide/programs-tab/#advanced-custom-program-entries","title":"Advanced: Custom Program Entries","text":"<p>You can manually edit <code>data/settings/programs.json</code> to configure programs:</p> <pre><code>{\n  \"programs\": [\n    {\n      \"id\": \"bleachbit\",\n      \"name\": \"BleachBit\",\n      \"version\": \"4.6.0\",\n      \"path\": \"programs/BleachBit - 4.6.0/bleachbit.exe\",\n      \"description\": \"Clean up unnecessary files and other traces\"\n    }\n  ]\n}\n</code></pre>"},{"location":"user-guide/programs-tab/#tips","title":"Tips","text":"<ul> <li>Portable apps work best - Use portable (non-installing) versions of tools</li> <li>Update paths - If you move or rename a program folder, update programs.json</li> <li>Add descriptions - Help users understand what each tool does</li> <li>Use consistent naming - Makes it easier to find tools later</li> </ul> <p>Next: Scripts Tab</p>"},{"location":"user-guide/reports-tab/","title":"Reports Tab","text":"<p>The Reports tab shows previously generated reports from completed maintenance and diagnostic runs.</p>"},{"location":"user-guide/reports-tab/#overview","title":"Overview","text":"<p>Reports contain:</p> <ul> <li>Execution results from all tasks run</li> <li>Technical data for diagnostic purposes</li> <li>Customer summaries for client handoff</li> <li>Timestamps and duration information</li> <li>Status of each task (success, warning, failed)</li> </ul>"},{"location":"user-guide/reports-tab/#viewing-reports","title":"Viewing Reports","text":"<ol> <li>Click the Reports tab</li> <li>A list of previous reports is displayed with:</li> <li>Run date and time</li> <li>Number of tasks executed</li> <li>Overall status</li> <li>Click on a report to view details</li> </ol>"},{"location":"user-guide/reports-tab/#report-contents","title":"Report Contents","text":""},{"location":"user-guide/reports-tab/#technical-report","title":"Technical Report","text":"<p>Contains detailed technical information:</p> <ul> <li>Raw output from each tool</li> <li>Performance metrics and benchmarks</li> <li>Full error messages if any</li> <li>Execution logs and timestamps</li> <li>Configuration used for the run</li> </ul> <p>Best for:</p> <ul> <li>Detailed diagnostics and troubleshooting</li> <li>Technical record-keeping</li> <li>Analyzing tool output</li> <li>Archival purposes</li> </ul>"},{"location":"user-guide/reports-tab/#customer-report","title":"Customer Report","text":"<p>Contains a simplified professional summary:</p> <ul> <li>Executive summary of findings</li> <li>Issues found and recommendations</li> <li>Work performed (files cleaned, space freed)</li> <li>Security status and threats</li> <li>Performance results from testing</li> <li>Next steps or recommendations</li> </ul> <p>Best for:</p> <ul> <li>Client communication</li> <li>Service documentation</li> <li>Quick reference</li> <li>Professional appearance</li> </ul>"},{"location":"user-guide/reports-tab/#exporting-reports","title":"Exporting Reports","text":""},{"location":"user-guide/reports-tab/#how-to-export","title":"How to Export","text":"<ol> <li>Open a report</li> <li>Click the \"Export\" or \"Download\" button</li> <li>Choose your desired format</li> </ol>"},{"location":"user-guide/reports-tab/#organizing-reports","title":"Organizing Reports","text":"<p>Reports are stored in <code>data/reports/</code> with timestamps:</p> <pre><code>data/reports/\n\u251c\u2500\u2500 run_1760227693411.json\n\u251c\u2500\u2500 run_1760238913549.json\n\u2514\u2500\u2500 run_1760251147645.json\n</code></pre>"},{"location":"user-guide/reports-tab/#archiving-old-reports","title":"Archiving Old Reports","text":"<ol> <li>Move old report files to an archive location</li> <li>Keep recent reports in <code>data/reports/</code> for quick access</li> <li>Consider compressing archived reports to save space</li> </ol>"},{"location":"user-guide/reports-tab/#tips-for-report-management","title":"Tips for Report Management","text":"<ul> <li>Save important reports: Export to PDF or JSON for long-term storage</li> <li>Compare reports: Run the same tasks periodically to track improvements</li> <li>Customer copies: Always give clients a PDF or email summary</li> <li>Technical records: Keep JSON exports for internal records</li> <li>Folder organization: Create subfolders in <code>data/reports/</code> by date or client</li> </ul>"},{"location":"user-guide/reports-tab/#report-best-practices","title":"Report Best Practices","text":"<ul> <li>Date your reports: Timestamp helps track changes over time</li> <li>Include baseline: Take an initial report before maintenance</li> <li>After-action report: Take another report after major work</li> <li>Document changes: Note what was fixed and when</li> <li>Archive systematically: Keep organized storage of historical reports</li> </ul> <p>Next: Component Tests Tab</p>"},{"location":"user-guide/scripts-tab/","title":"Scripts Tab","text":"<p>The Scripts tab allows you to create, organize, and execute PowerShell and CMD scripts directly from AutoService.</p>"},{"location":"user-guide/scripts-tab/#overview","title":"Overview","text":"<p>Scripts are useful for:</p> <ul> <li>Automating repetitive administrative tasks</li> <li>Running custom maintenance routines</li> <li>Automating system configuration</li> <li>Creating custom diagnostics</li> <li>Batch operations</li> </ul>"},{"location":"user-guide/scripts-tab/#viewing-scripts","title":"Viewing Scripts","text":"<p>The Scripts tab displays:</p> <ul> <li>List of saved scripts</li> <li>Script name and description</li> <li>Script type (PowerShell or CMD)</li> <li>Launch/edit buttons</li> </ul>"},{"location":"user-guide/scripts-tab/#running-a-script","title":"Running a Script","text":"<ol> <li>Find the script you want to run</li> <li>Click \"Run\" to execute it</li> <li>A terminal window may open showing script output</li> <li>Wait for the script to complete</li> <li>Review any output or results</li> </ol>"},{"location":"user-guide/scripts-tab/#creating-a-new-script","title":"Creating a New Script","text":"<ol> <li>Click \"New Script\" or the \"+\" button</li> <li>Enter a name for your script</li> <li>Choose the interpreter:</li> <li>PowerShell - For advanced Windows automation</li> <li>CMD - For batch commands and legacy scripts</li> <li>Enter your script content in the editor</li> <li>Click \"Save\"</li> </ol>"},{"location":"user-guide/scripts-tab/#script-examples","title":"Script Examples","text":""},{"location":"user-guide/scripts-tab/#basic-powershell-script","title":"Basic PowerShell Script","text":"<pre><code># Get Windows version\n$os = Get-WmiObject Win32_OperatingSystem\nWrite-Host \"OS: $($os.Caption)\"\nWrite-Host \"Build: $($os.BuildNumber)\"\n</code></pre>"},{"location":"user-guide/scripts-tab/#basic-cmd-script","title":"Basic CMD Script","text":"<pre><code>@echo off\nREM Get system information\nsysteminfo\n</code></pre>"},{"location":"user-guide/scripts-tab/#disk-usage-report","title":"Disk Usage Report","text":"<pre><code># Report disk usage by folder\n$path = \"C:\\Users\"\nGet-ChildItem -Path $path -Directory | ForEach-Object {\n    $size = (Get-ChildItem -Path $_.FullName -Recurse -Force | Measure-Object -Property Length -Sum).Sum\n    Write-Host \"$($_.Name): $((\"{0:N2}\" -f ($size / 1GB)) + ' GB')\"\n}\n</code></pre>"},{"location":"user-guide/scripts-tab/#editing-scripts","title":"Editing Scripts","text":"<ol> <li>Click the \"Edit\" button on a script</li> <li>Modify the script content</li> <li>Click \"Save\" to update</li> </ol>"},{"location":"user-guide/scripts-tab/#deleting-scripts","title":"Deleting Scripts","text":"<ol> <li>Find the script you want to remove</li> <li>Click the \"Delete\" or \"X\" button</li> <li>Confirm deletion</li> </ol>"},{"location":"user-guide/scripts-tab/#tips-for-script-writing","title":"Tips for Script Writing","text":"<ul> <li>PowerShell: Use for complex operations and Windows API access</li> <li>CMD: Use for simple batch operations and compatibility</li> <li>Error Handling: Include try-catch blocks to handle errors gracefully</li> <li>Output: Use Write-Host (PowerShell) or echo (CMD) for user feedback</li> <li>Testing: Test scripts on a non-production system first</li> <li>Comments: Add comments explaining what the script does</li> </ul>"},{"location":"user-guide/scripts-tab/#important-notes","title":"Important Notes","text":"<ul> <li>Scripts run with administrator privileges (same as AutoService)</li> <li>Scripts can access all system resources</li> <li>Be careful with scripts that modify system files</li> <li>Always backup data before running unknown scripts</li> <li>Test scripts on a test system before production use</li> </ul> <p>Next: System Info Tab</p>"},{"location":"user-guide/service-tab/","title":"Service Tab - Task Automation","text":"<p>The Service tab is the heart of AutoService\u2014where you build and execute automated maintenance and diagnostic tasks.</p>"},{"location":"user-guide/service-tab/#overview","title":"Overview","text":"<p>The Service tab consists of three main views:</p> <ol> <li>Presets (default view) - Pre-built task collections for common scenarios</li> <li>Builder - Customize and queue individual tasks</li> <li>Runner - Execute queued tasks and monitor progress</li> <li>Results - Review completed task reports</li> </ol>"},{"location":"user-guide/service-tab/#the-builder-interface","title":"The Builder Interface","text":""},{"location":"user-guide/service-tab/#service-catalog-left-panel","title":"Service Catalog (Left Panel)","text":"<p>The left side shows available services organized by category:</p> <ul> <li> <p>Diagnostics</p> </li> <li> <p>Disk Space Report - Analyze disk usage and free space</p> </li> <li>SMART Drive Report - Drive health and S.M.A.R.T. data</li> <li>CHKDSK Scan - Check disk for errors</li> <li>Battery Health Report - Battery status and health</li> <li> <p>WINSAT Disk - Disk performance benchmarking</p> </li> <li> <p>System Maintenance</p> </li> <li> <p>SFC Scan - Verify system file integrity</p> </li> <li>DISM Health Check - System image health check</li> <li>Windows Update - Install available updates</li> <li> <p>Why Not Win11 - Check Windows 11 compatibility</p> </li> <li> <p>Cleanup &amp; Security</p> </li> <li> <p>BleachBit Clean - Remove temporary files and cache</p> </li> <li>AdwCleaner Clean - Remove adware and PUPs</li> <li>Drive Cleanup - Remove large unnecessary files</li> <li>KVRT Scan - Kaspersky virus removal tool</li> <li> <p>Trellix Stinger - McAfee malware removal</p> </li> <li> <p>Stress Testing</p> </li> <li> <p>HeavyLoad CPU Stress - CPU load testing</p> </li> <li>HeavyLoad Memory Stress - RAM stress testing</li> <li>HeavyLoad GPU Stress - GPU load testing</li> <li> <p>FurMark Stress Test - Graphics stress testing</p> </li> <li> <p>Network &amp; Connectivity</p> </li> <li> <p>Ping Test - ICMP connectivity test</p> </li> <li>Speed Test - Internet speed benchmark</li> <li> <p>iPerf Test - Network performance testing</p> </li> <li> <p>Optimization</p> </li> <li>AI Startup Disable - Remove startup programs</li> <li>AI Browser Notification Disable - Disable browser notifications</li> </ul>"},{"location":"user-guide/service-tab/#task-queue-right-panel","title":"Task Queue (Right Panel)","text":"<p>Your queued tasks appear here in execution order. For each task, you can:</p> <ul> <li>View parameters - Click on a task to see adjustable settings</li> <li>Reorder - Drag tasks up or down to change execution order</li> <li>Remove - Click the X to remove a task from the queue</li> <li>Adjust settings - Modify parameters like stress test duration before running</li> </ul>"},{"location":"user-guide/service-tab/#adding-tasks-to-your-queue","title":"Adding Tasks to Your Queue","text":""},{"location":"user-guide/service-tab/#step-1-search-or-browse","title":"Step 1: Search or Browse","text":"<ul> <li>Scroll through the catalog, or</li> <li>Use the search box to find specific tasks quickly</li> </ul>"},{"location":"user-guide/service-tab/#step-2-click-to-add","title":"Step 2: Click to Add","text":"<p>Click on any service in the left panel to add it to your queue. The task appears in the right panel with default settings.</p>"},{"location":"user-guide/service-tab/#step-3-configure-optional","title":"Step 3: Configure (Optional)","text":"<p>Some tasks have configurable parameters:</p> <ul> <li>Stress Tests: Set duration (in minutes)</li> <li>Network Tests: Set target server or parameters</li> <li>Cleanup Tasks: Choose what types of files to clean</li> </ul> <p>Click on a queued task to reveal its configuration options.</p>"},{"location":"user-guide/service-tab/#step-4-reorder-as-needed","title":"Step 4: Reorder as Needed","text":"<p>Drag tasks up or down in the queue to set the execution order. For example:</p> <ol> <li>System diagnostics first (check drive health)</li> <li>Cleanup tasks (remove unnecessary files)</li> <li>Security scans (verify no threats)</li> <li>Stress tests last (test stability after cleanup)</li> </ol>"},{"location":"user-guide/service-tab/#presets","title":"Presets","text":"<p>Presets are pre-configured task queues for common scenarios:</p> <ul> <li>Quick Check - Basic diagnostics (5-10 minutes)</li> <li>Full Maintenance - Complete cleanup and diagnostics (30-45 minutes)</li> <li>Security Scan - Comprehensive security checks (15-20 minutes)</li> <li>Hardware Stress - Full stress testing suite (varies by duration)</li> </ul> <p>To use a preset:</p> <ol> <li>Click the Presets tab</li> <li>Select a preset from the list</li> <li>Review the queued tasks</li> <li>Click Run to execute, or customize further in the Builder</li> </ol>"},{"location":"user-guide/service-tab/#running-your-queue","title":"Running Your Queue","text":"<p>Before You Start</p> <ul> <li>Save your work on the target system</li> <li>Close other applications to prevent interference</li> <li>Ensure admin privileges (UAC prompt may appear)</li> <li>Plan for time: Check estimated duration</li> </ul>"},{"location":"user-guide/service-tab/#starting-execution","title":"Starting Execution","text":"<ol> <li>Click the Run button after building your queue</li> <li>You'll be taken to the Runner view</li> <li>Execution begins automatically</li> </ol>"},{"location":"user-guide/service-tab/#monitoring-progress","title":"Monitoring Progress","text":"<p>During execution, you see:</p> <ul> <li>Current task name and description</li> <li>Progress bar showing overall completion</li> <li>Task status (Running, Completed, Failed, Skipped)</li> <li>Live output from the executing tool</li> <li>Elapsed time for the current task</li> <li>Estimated time remaining</li> </ul>"},{"location":"user-guide/service-tab/#what-to-expect","title":"What to Expect","text":"<ul> <li>Normal tasks (SFC, DISM) may show no output initially</li> <li>Scans will show progress bars or file counts</li> <li>Stress tests will show CPU/Memory/GPU usage</li> <li>Some tasks require admin elevation - UAC prompts may appear</li> <li>Some tasks take longer - Be patient; don't interrupt</li> </ul>"},{"location":"user-guide/service-tab/#canceling-execution","title":"Canceling Execution","text":"<p>Interrupting Tasks</p> <p>Some tasks may take a moment to shut down gracefully. Avoid force-closing AutoService during execution.</p> <p>If you need to stop the queue:</p> <ul> <li>Click the \"Cancel\" or \"Stop\" button</li> <li>Currently executing task will be interrupted</li> <li>Already completed tasks are saved</li> </ul>"},{"location":"user-guide/service-tab/#viewing-results","title":"Viewing Results","text":"<p>After execution completes (or is canceled), navigate to the Results view:</p>"},{"location":"user-guide/service-tab/#technical-view","title":"Technical View","text":"<p>Shows detailed technical information:</p> <ul> <li>Raw output from each tool</li> <li>Performance metrics and data</li> <li>Detailed error messages if any</li> <li>Complete execution logs</li> </ul> <p>Use this view for:</p> <ul> <li>Diagnosing issues</li> <li>Technical reference</li> <li>Archival records</li> </ul>"},{"location":"user-guide/service-tab/#customer-view","title":"Customer View","text":"<p>Shows a simplified, professional summary:</p> <ul> <li>Key findings only</li> <li>Issues and recommendations</li> <li>Files cleaned / space freed</li> <li>Security threats found</li> <li>Performance improvements</li> </ul> <p>Use this view for:</p> <ul> <li>Customer communication</li> <li>Service documentation</li> <li>Quick summary reference</li> </ul>"},{"location":"user-guide/service-tab/#printing-exporting","title":"Printing &amp; Exporting","text":"<p>From the results view, you can:</p> <ul> <li>Print both technical and customer views</li> <li>Save as PDF for archival or email</li> <li>Download JSON for data analysis</li> <li>Copy to clipboard for pasting into documents</li> </ul>"},{"location":"user-guide/service-tab/#common-workflow-examples","title":"Common Workflow Examples","text":""},{"location":"user-guide/service-tab/#quick-system-check-15-minutes","title":"Quick System Check (15 minutes)","text":"<ol> <li>Add Disk Space Report</li> <li>Add SMART Drive Report</li> <li>Add SFC Scan</li> <li>Run and review</li> <li>Export results</li> </ol>"},{"location":"user-guide/service-tab/#full-maintenance-45-minutes","title":"Full Maintenance (45 minutes)","text":"<ol> <li>Add Disk Space Report (before)</li> <li>Add AdwCleaner Clean</li> <li>Add BleachBit Clean</li> <li>Add Drive Cleanup</li> <li>Add Windows Update</li> <li>Add SFC Scan</li> <li>Add Disk Space Report (after, to compare)</li> <li>Run and review</li> </ol>"},{"location":"user-guide/service-tab/#pre-sale-diagnostics","title":"Pre-Sale Diagnostics","text":"<ol> <li>Add System Info (base snapshot)</li> <li>Add SMART Drive Report</li> <li>Add Battery Health Report (if laptop)</li> <li>Add Windows Update (if needed)</li> <li>Add CHKDSK Scan (if drive issues suspected)</li> <li>Run and generate customer report</li> </ol>"},{"location":"user-guide/service-tab/#hardware-validation","title":"Hardware Validation","text":"<ol> <li>Add WINSAT Disk (performance baseline)</li> <li>Add HeavyLoad CPU Stress (5 minutes)</li> <li>Add HeavyLoad Memory Stress (5 minutes)</li> <li>Add FurMark Stress Test (5 minutes)</li> <li>Run and monitor system stability</li> <li>Review temperatures and results</li> </ol> <p>Tips for Efficient Runs</p> <ul> <li>Group similar tasks - Do diagnostics first, then cleanup, then stress tests</li> <li>Run overnight for long maintenance routines (if UAC will allow it)</li> <li>Check tool availability before queuing - If a tool is missing, the task will fail</li> <li>Generate both reports - Technical for reference, customer for handoff</li> <li>Save results - Store reports for future reference or comparison</li> </ul>"},{"location":"user-guide/service-tab/#troubleshooting","title":"Troubleshooting","text":"<p>Tasks Fail Immediately</p> <p>Causes: - Required tool is missing or not in PATH - Task requires administrator privileges but run without elevation - System doesn't meet task requirements</p> <p>Solution: - Check Settings \u2192 Tools for missing tools - Re-run AutoService as administrator - Check logs in <code>data/logs/</code> for specific error</p> <p>Progress Seems Stuck</p> <p>Causes: - Long-running task (SFC, DISM can take 15+ minutes) - Tool is responding but not showing output - System is busy with other processes</p> <p>Solution: - Wait longer before canceling (check system resource usage) - Check Windows Task Manager for tool processes - Close other applications to free resources</p> <p>Some Tasks Skipped</p> <p>Causes: - Tool not available on this system - Task requirements not met - System configuration prevents execution</p> <p>Solution: - Check skip reason in results - Install missing tools via Programs tab - Verify system configuration</p> <p>Next: Learn about Programs Tab</p>"},{"location":"user-guide/settings-tab/","title":"Settings Tab","text":"<p>The Settings tab allows you to configure AutoService behavior, preferences, and tool management.</p>"},{"location":"user-guide/settings-tab/#overview","title":"Overview","text":"<p>Settings are organized into several sections:</p> <ul> <li>Programs - View and manage required external tools</li> <li>Technician - Add quick-access web tools and links</li> <li>Network - Configure network test settings</li> <li>AI / API - Set up API keys for AI features</li> <li>Business - Configure technician mode and business information</li> <li>Reports - Configure report generation and completion notifications</li> <li>Sentry - Error tracking and performance monitoring</li> </ul>"},{"location":"user-guide/settings-tab/#programs","title":"Programs","text":"<p>This section displays all external tools required by automated services.</p>"},{"location":"user-guide/settings-tab/#tool-status-indicators","title":"Tool Status Indicators","text":"<ul> <li>Green checkmark (\u2713) - Tool is installed and available</li> <li>Yellow warning (\u26a0) - Tool is available but may need update</li> <li>Red X (\u2715) - Tool is missing or not available</li> </ul>"},{"location":"user-guide/settings-tab/#available-tools","title":"Available Tools","text":"<p>Common tools include:</p> <ul> <li>BleachBit - Temporary file cleanup</li> <li>AdwCleaner - Adware removal</li> <li>7-Zip - Archive utility</li> <li>SFC - System File Checker (built-in)</li> <li>DISM - Deployment Image Servicing (built-in)</li> <li>HeavyLoad - Stress testing</li> <li>FurMark - GPU stress testing</li> <li>smartctl - Drive health monitoring</li> <li>And more...</li> </ul>"},{"location":"user-guide/settings-tab/#search-tools","title":"Search Tools","text":"<p>Use the search box to quickly filter and find specific tools in the programs list.</p>"},{"location":"user-guide/settings-tab/#technician","title":"Technician","text":"<p>Quick-access web tools that technicians use frequently.</p>"},{"location":"user-guide/settings-tab/#adding-technician-links","title":"Adding Technician Links","text":"<ol> <li>Enter a Title (e.g., \"Password Reset\", \"Remote Support\")</li> <li>Enter the URL (must be valid https:// or http:// URL)</li> <li>Click Add</li> <li>Links appear as tabs in the top bar of AutoService</li> </ol>"},{"location":"user-guide/settings-tab/#persistent-web-data","title":"Persistent Web Data","text":"<p>Browser data (cookies, localStorage, site data) is stored in the app's webview profile and persists across sessions when running from the same USB drive\u2014useful for staying logged into frequently-used tools.</p>"},{"location":"user-guide/settings-tab/#network","title":"Network","text":"<p>Configure settings for network diagnostics and tests.</p>"},{"location":"user-guide/settings-tab/#iperf-server","title":"iPerf Server","text":"<p>Configure the IP address or hostname of your iPerf server for network performance testing:</p> <ul> <li>Leave blank to disable iPerf tests</li> <li>Enter a valid IPv4 (e.g., <code>192.168.0.34</code>) or IPv6 address</li> </ul>"},{"location":"user-guide/settings-tab/#ping-host","title":"Ping Host","text":"<p>Set the default host for network connectivity testing:</p> <ul> <li>Default: <code>8.8.8.8</code> (Google DNS)</li> <li>Can use IP address (IPv4 or IPv6) or hostname</li> <li>Used by network diagnostic services to verify connectivity</li> </ul>"},{"location":"user-guide/settings-tab/#ai-api","title":"AI / API","text":"<p>Configure API keys for AI-powered features.</p>"},{"location":"user-guide/settings-tab/#openai-api-key","title":"OpenAI API Key","text":"<p>Required for AI Startup Optimizer and other AI features:</p> <ol> <li>Get your API key from platform.openai.com/api-keys</li> <li>Enter your key in the OpenAI API Key field (displayed as dots for security)</li> <li>Click Save to store it</li> <li>Click Clear to remove the saved key</li> </ol>"},{"location":"user-guide/settings-tab/#business","title":"Business","text":"<p>Configure business branding and technician information for customer-facing reports.</p>"},{"location":"user-guide/settings-tab/#enable-technician-mode","title":"Enable Technician Mode","text":"<p>Toggle Enable Technician Mode to:</p> <ul> <li>Add business branding to customer reports</li> <li>Enable all business information fields</li> <li>Include technician/company details on printed reports</li> </ul> <p>When disabled, all business fields are grayed out.</p>"},{"location":"user-guide/settings-tab/#technician-names","title":"Technician Names","text":"<p>Add frequently-used technician names for quick selection when starting services:</p> <ol> <li>Enter a technician name</li> <li>Click Add</li> <li>Names appear in a list for quick access during service runs</li> </ol>"},{"location":"user-guide/settings-tab/#business-logo","title":"Business Logo","text":"<p>Upload an image file to use as your business logo on reports:</p> <ol> <li>Click Browse... to select an image file from your computer</li> <li>Any image format is supported (PNG, JPG, GIF, etc.)</li> <li>The image is embedded into settings for portability</li> </ol>"},{"location":"user-guide/settings-tab/#business-information","title":"Business Information","text":"<p>Fill in your business details (all fields optional):</p> <ul> <li>Business Name - Your company/business name</li> <li>Business Address - Office address</li> <li>Phone Number - Contact phone</li> <li>Email Address - Contact email</li> <li>Website - Business website URL</li> <li>TFN (Tax File Number) - Australian tax file number (if applicable)</li> <li>ABN (Australian Business Number) - Australian business number (if applicable)</li> </ul> <p>All fields appear on customer reports when Technician Mode is enabled.</p>"},{"location":"user-guide/settings-tab/#reports","title":"Reports","text":"<p>Configure report saving behavior and completion notifications.</p>"},{"location":"user-guide/settings-tab/#auto-save-reports","title":"Auto-save Reports","text":"<p>Enable Auto-save Reports to automatically save reports after every service run completes:</p> <ul> <li>On: Reports automatically saved to <code>data/reports/</code> with no action needed</li> <li>Off: You must manually save reports using the Save Report button</li> </ul>"},{"location":"user-guide/settings-tab/#desktop-notifications","title":"Desktop Notifications","text":"<p>Enable Desktop Notifications to receive a system notification when a service run finishes:</p> <ul> <li>Shows a toast notification in the system tray</li> <li>Useful when you need to monitor multiple PC cleanups</li> </ul>"},{"location":"user-guide/settings-tab/#completion-sound","title":"Completion Sound","text":"<p>Enable Play Sound on Completion to hear an audio alert when services finish:</p> <ul> <li>Volume: Adjust volume from 0-100%</li> <li>Sound: Choose notification sound (currently: Classic Beep)</li> <li>Repeat: Set how many times to play the sound (1-10)</li> <li>Test: Click the speaker icon to preview the selected sound with current settings</li> </ul>"},{"location":"user-guide/settings-tab/#network-report-sharing","title":"Network Report Sharing","text":"<p>Share completed reports to a network location (UNC path):</p> <ol> <li>Enable Enable network report sharing</li> <li>Enter a valid UNC path (e.g., <code>\\\\server\\share\\reports</code> or <code>//server/share/reports</code>)</li> <li>Choose where to save reports:</li> <li>Local only: Save to <code>data/reports/</code> only</li> <li>Network only: Save to network share only</li> <li>Both (recommended): Save to both locations for backup</li> <li>Click Test Connection to verify the network path is accessible</li> </ol>"},{"location":"user-guide/settings-tab/#sentry-error-tracking","title":"Sentry Error Tracking","text":"<p>Configure error reporting and performance monitoring for the Python service runner.</p>"},{"location":"user-guide/settings-tab/#enable-sentry","title":"Enable Sentry","text":"<p>Master toggle to enable/disable all error tracking:</p> <ul> <li>Enabled: Reports errors and performance metrics to Sentry</li> <li>Disabled: No error data is sent</li> </ul>"},{"location":"user-guide/settings-tab/#environment","title":"Environment","text":"<p>Select the environment for tracking:</p> <ul> <li>Production - Standard environment (default)</li> <li>Development - For development builds</li> <li>Staging - For testing releases</li> </ul>"},{"location":"user-guide/settings-tab/#send-pii-data","title":"Send PII Data","text":"<p>Include personal information in error reports:</p> <ul> <li>Enabled: Include hostname and username (helps identify which PC had issues)</li> <li>Disabled: Strip personal identifiers from reports</li> </ul>"},{"location":"user-guide/settings-tab/#performance-monitoring","title":"Performance Monitoring","text":"<p>Enable transaction and trace sampling:</p> <ul> <li>Enabled: Track task execution performance and response times</li> <li>Disabled: Only errors are reported</li> </ul>"},{"location":"user-guide/settings-tab/#system-information","title":"System Information","text":"<p>Include system details in error reports:</p> <ul> <li>Enabled: Include CPU, memory, disk information (helps diagnose hardware-related issues)</li> <li>Disabled: Exclude system information</li> </ul>"},{"location":"user-guide/settings-tab/#saving-settings","title":"Saving Settings","text":"<p>Most settings save automatically as you make changes. Status messages confirm success or report errors.</p> <p>Settings are stored in JSON files:</p> <ul> <li><code>data/settings/app_settings.json</code> - Main settings</li> <li><code>data/settings/programs.json</code> - Tool definitions</li> <li><code>data/settings/scripts.json</code> - User scripts</li> </ul> <p>Next: Shortcuts Tab</p>"},{"location":"user-guide/shortcuts-tab/","title":"Shortcuts Tab","text":"<p>The Shortcuts tab provides quick access to commonly used Windows management tools and utilities.</p>"},{"location":"user-guide/shortcuts-tab/#overview","title":"Overview","text":"<p>Shortcuts are quick-launch buttons for:</p> <ul> <li>Windows system management tools</li> <li>Settings and configuration panels</li> <li>Device and driver management</li> <li>Performance and monitoring tools</li> <li>Command-line interfaces</li> </ul> <p>Back to User Guide Overview</p>"},{"location":"user-guide/system-info-tab/","title":"System Info Tab","text":"<p>The System Info tab provides a comprehensive snapshot of your computer's hardware and software configuration.</p>"},{"location":"user-guide/system-info-tab/#overview","title":"Overview","text":"<p>System Info displays detailed information about:</p> <ul> <li>Processor - CPU model, cores, speed, capabilities</li> <li>Memory - RAM size, type, speed, usage</li> <li>Storage - Disk capacity, free space, partitions</li> <li>Graphics - GPU model, VRAM, driver version</li> <li>Operating System - Windows version, build, installation date</li> <li>Battery (laptops) - Battery capacity, health, charge status</li> <li>Network - Adapters, IP addresses, MAC addresses</li> <li>Motherboard - Model, manufacturer, BIOS version</li> </ul>"},{"location":"user-guide/system-info-tab/#viewing-system-information","title":"Viewing System Information","text":"<ol> <li>Click the System Info tab</li> <li>Information is displayed in organized sections</li> <li>Scroll to view all details</li> <li>Each section can usually be expanded or collapsed</li> </ol>"},{"location":"user-guide/system-info-tab/#interpreting-the-information","title":"Interpreting the Information","text":""},{"location":"user-guide/system-info-tab/#processor","title":"Processor","text":"<ul> <li>Model: Processor name (e.g., Intel Core i7-10700K)</li> <li>Cores/Threads: Number of processor cores and logical processors</li> <li>Base/Boost Speed: Clock speeds in GHz</li> <li>Cache: L3 cache size</li> </ul>"},{"location":"user-guide/system-info-tab/#memory-ram","title":"Memory (RAM)","text":"<ul> <li>Total: Total installed RAM</li> <li>Available: Free RAM currently available</li> <li>Used: RAM currently in use</li> <li>Type: DDR3, DDR4, DDR5, etc.</li> <li>Speed: Speed in MHz</li> </ul>"},{"location":"user-guide/system-info-tab/#storage","title":"Storage","text":"<ul> <li>Drive: Disk model and capacity</li> <li>Used: Space currently used</li> <li>Free: Available space</li> <li>File System: NTFS, FAT32, exFAT, etc.</li> <li>Partitions: Number and configuration of disk partitions</li> </ul>"},{"location":"user-guide/system-info-tab/#graphics","title":"Graphics","text":"<ul> <li>GPU: Graphics card model</li> <li>VRAM: Video memory (dedicated or shared)</li> <li>Driver: Current driver version</li> <li>API Support: DirectX, OpenGL, Vulkan versions</li> </ul>"},{"location":"user-guide/system-info-tab/#operating-system","title":"Operating System","text":"<ul> <li>OS: Windows 10, Windows 11, etc.</li> <li>Version: Specific version number</li> <li>Build: Windows build number</li> <li>Installation Date: When Windows was installed</li> <li>System Type: 32-bit or 64-bit</li> </ul>"},{"location":"user-guide/system-info-tab/#battery-laptops-only","title":"Battery (Laptops Only)","text":"<ul> <li>Capacity: Battery capacity in mAh</li> <li>Current Charge: Current battery percentage</li> <li>Design Capacity: Original battery capacity</li> <li>Health: Battery health percentage</li> <li>State: Plugged in, charging, discharging</li> </ul>"},{"location":"user-guide/system-info-tab/#network","title":"Network","text":"<ul> <li>Adapters: Network interface cards installed</li> <li>IP Address: IPv4 and IPv6 addresses</li> <li>MAC Address: Physical address of adapters</li> <li>Speed: Connection speed if connected</li> </ul>"},{"location":"user-guide/system-info-tab/#uses-for-system-information","title":"Uses for System Information","text":"<ul> <li>Troubleshooting: Reference hardware specs when diagnosing issues</li> <li>Documentation: Keep records of system configuration</li> <li>Compatibility: Check if system meets software requirements</li> <li>Upgrades: Plan hardware upgrades based on current specs</li> <li>Warranty: Verify hardware models for warranty claims</li> <li>Reports: Include in technical reports for clients</li> </ul>"},{"location":"user-guide/system-info-tab/#tips","title":"Tips","text":"<ul> <li>Screenshots: Take screenshots of System Info for documentation</li> <li>Export: Some information can be copied to clipboard</li> <li>Baseline: Compare against previous system info to detect changes</li> <li>Energy Efficiency: Check CPU/Memory specs against software requirements</li> </ul> <p>Next: Reports Tab</p>"}]}